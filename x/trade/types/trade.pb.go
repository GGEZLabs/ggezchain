// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggezchain/trade/trade.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradeStatus int32

const (
	// TRADE_STATUS_UNSPECIFIED defines the default trade status.
	TradeStatus_TRADE_STATUS_UNSPECIFIED TradeStatus = 0
	// TRADE_STATUS_PENDING defines a trade status of a trade that still
	// not processed.
	TradeStatus_TRADE_STATUS_PENDING TradeStatus = 1
	// TRADE_STATUS_CANCELED defines a trade status of a trade that has
	// canceled.
	TradeStatus_TRADE_STATUS_CANCELED TradeStatus = 2
	// TRADE_STATUS_PROCESSED defines a trade status of a trade that has
	// processed.
	TradeStatus_TRADE_STATUS_PROCESSED TradeStatus = 3
	// TRADE_STATUS_REJECTED defines a trade status of a trade that has
	// been REJECTED.
	TradeStatus_TRADE_STATUS_REJECTED TradeStatus = 4
	// TRADE_STATUS_FAILED defines a trade status of a trade that has
	// failed.
	TradeStatus_TRADE_STATUS_FAILED TradeStatus = 5
)

var TradeStatus_name = map[int32]string{
	0: "TRADE_STATUS_UNSPECIFIED",
	1: "TRADE_STATUS_PENDING",
	2: "TRADE_STATUS_CANCELED",
	3: "TRADE_STATUS_PROCESSED",
	4: "TRADE_STATUS_REJECTED",
	5: "TRADE_STATUS_FAILED",
}

var TradeStatus_value = map[string]int32{
	"TRADE_STATUS_UNSPECIFIED": 0,
	"TRADE_STATUS_PENDING":     1,
	"TRADE_STATUS_CANCELED":    2,
	"TRADE_STATUS_PROCESSED":   3,
	"TRADE_STATUS_REJECTED":    4,
	"TRADE_STATUS_FAILED":      5,
}

func (x TradeStatus) String() string {
	return proto.EnumName(TradeStatus_name, int32(x))
}

func (TradeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_574ca8cec0c476be, []int{0}
}

type ProcessType int32

const (
	ProcessType_PROCESS_TYPE_UNSPECIFIED ProcessType = 0
	ProcessType_PROCESS_TYPE_CONFIRM     ProcessType = 1
	ProcessType_PROCESS_TYPE_REJECT      ProcessType = 2
)

var ProcessType_name = map[int32]string{
	0: "PROCESS_TYPE_UNSPECIFIED",
	1: "PROCESS_TYPE_CONFIRM",
	2: "PROCESS_TYPE_REJECT",
}

var ProcessType_value = map[string]int32{
	"PROCESS_TYPE_UNSPECIFIED": 0,
	"PROCESS_TYPE_CONFIRM":     1,
	"PROCESS_TYPE_REJECT":      2,
}

func (x ProcessType) String() string {
	return proto.EnumName(ProcessType_name, int32(x))
}

func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_574ca8cec0c476be, []int{1}
}

type TradeType int32

const (
	TradeType_TRADE_TYPE_UNSPECIFIED  TradeType = 0
	TradeType_TRADE_TYPE_BUY          TradeType = 1
	TradeType_TRADE_TYPE_SELL         TradeType = 2
	TradeType_TRADE_TYPE_SPLIT        TradeType = 3
	TradeType_TRADE_TYPE_REINVESTMENT TradeType = 4
	TradeType_TRADE_TYPE_DIVIDENDS    TradeType = 5
)

var TradeType_name = map[int32]string{
	0: "TRADE_TYPE_UNSPECIFIED",
	1: "TRADE_TYPE_BUY",
	2: "TRADE_TYPE_SELL",
	3: "TRADE_TYPE_SPLIT",
	4: "TRADE_TYPE_REINVESTMENT",
	5: "TRADE_TYPE_DIVIDENDS",
}

var TradeType_value = map[string]int32{
	"TRADE_TYPE_UNSPECIFIED":  0,
	"TRADE_TYPE_BUY":          1,
	"TRADE_TYPE_SELL":         2,
	"TRADE_TYPE_SPLIT":        3,
	"TRADE_TYPE_REINVESTMENT": 4,
	"TRADE_TYPE_DIVIDENDS":    5,
}

func (x TradeType) String() string {
	return proto.EnumName(TradeType_name, int32(x))
}

func (TradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_574ca8cec0c476be, []int{2}
}

func init() {
	proto.RegisterEnum("ggezchain.trade.TradeStatus", TradeStatus_name, TradeStatus_value)
	proto.RegisterEnum("ggezchain.trade.ProcessType", ProcessType_name, ProcessType_value)
	proto.RegisterEnum("ggezchain.trade.TradeType", TradeType_name, TradeType_value)
}

func init() { proto.RegisterFile("ggezchain/trade/trade.proto", fileDescriptor_574ca8cec0c476be) }

var fileDescriptor_574ca8cec0c476be = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6e, 0xda, 0x40,
	0x14, 0xc6, 0x3d, 0xfc, 0xa9, 0xd4, 0x41, 0x2a, 0xa3, 0x81, 0x16, 0x5a, 0x2a, 0x1f, 0x80, 0x85,
	0x2d, 0xb5, 0x27, 0x30, 0x9e, 0x07, 0x9d, 0xca, 0x0c, 0x96, 0x67, 0x40, 0x82, 0x45, 0x91, 0xa1,
	0x16, 0xb0, 0x68, 0x8d, 0xb0, 0xa9, 0x4a, 0x4e, 0x91, 0x0b, 0xe4, 0x0e, 0x39, 0x46, 0x96, 0x2c,
	0xb3, 0x8c, 0xe0, 0x22, 0x91, 0x4d, 0x02, 0xb6, 0xc8, 0x66, 0x34, 0xfa, 0x7e, 0x7a, 0xdf, 0xfb,
	0xf4, 0xf4, 0xe1, 0xd6, 0x62, 0x11, 0xdc, 0xcc, 0x97, 0xfe, 0xea, 0xaf, 0x19, 0x6f, 0xfc, 0xdf,
	0xc1, 0xe9, 0x35, 0xd6, 0x9b, 0x30, 0x0e, 0x69, 0xf5, 0x0c, 0x8d, 0x54, 0x6e, 0xdf, 0x23, 0x5c,
	0x51, 0xc9, 0x4f, 0xc6, 0x7e, 0xbc, 0x8d, 0xe8, 0x57, 0xdc, 0x54, 0x9e, 0xc5, 0x60, 0x2a, 0x95,
	0xa5, 0x86, 0x72, 0x3a, 0x14, 0xd2, 0x05, 0x9b, 0x77, 0x39, 0x30, 0xa2, 0xd1, 0x26, 0xae, 0xe7,
	0xa8, 0x0b, 0x82, 0x71, 0xd1, 0x23, 0x88, 0x7e, 0xc6, 0x1f, 0x73, 0xc4, 0xb6, 0x84, 0x0d, 0x0e,
	0x30, 0x52, 0xa0, 0x5f, 0xf0, 0xa7, 0xfc, 0x90, 0x37, 0xb0, 0x41, 0x4a, 0x60, 0xa4, 0x78, 0x35,
	0xe6, 0xc1, 0x4f, 0xb0, 0x15, 0x30, 0x52, 0xa2, 0x0d, 0x5c, 0xcb, 0xa1, 0xae, 0xc5, 0x13, 0xbf,
	0x72, 0xfb, 0x17, 0xae, 0xb8, 0x9b, 0x70, 0x1e, 0x44, 0x91, 0xda, 0xad, 0x83, 0x24, 0xf1, 0x8b,
	0xe3, 0x54, 0x8d, 0x5d, 0xb8, 0x4e, 0x9c, 0xa3, 0xf6, 0x40, 0x74, 0xb9, 0xd7, 0x27, 0x28, 0xf1,
	0xcf, 0x91, 0xd3, 0x6a, 0x52, 0x68, 0xdf, 0x21, 0xfc, 0x3e, 0x3d, 0x49, 0x6a, 0x7f, 0x4e, 0xff,
	0x86, 0x39, 0xc5, 0x1f, 0x32, 0xac, 0x33, 0x1c, 0x13, 0x44, 0x6b, 0xb8, 0x9a, 0xd1, 0x24, 0x38,
	0x0e, 0x29, 0xd0, 0x3a, 0x26, 0x59, 0xd1, 0x75, 0xb8, 0x22, 0x45, 0xda, 0xc2, 0x8d, 0x8c, 0xea,
	0x01, 0x17, 0x23, 0x90, 0xaa, 0x0f, 0x42, 0x91, 0xd2, 0xe5, 0xd4, 0x29, 0x64, 0x7c, 0xc4, 0x19,
	0x08, 0x26, 0x49, 0xb9, 0xf3, 0xe3, 0xe1, 0xa0, 0xa3, 0xfd, 0x41, 0x47, 0x4f, 0x07, 0x1d, 0xdd,
	0x1e, 0x75, 0x6d, 0x7f, 0xd4, 0xb5, 0xc7, 0xa3, 0xae, 0x4d, 0x8c, 0xc5, 0x2a, 0x5e, 0x6e, 0x67,
	0xc6, 0x3c, 0xfc, 0x63, 0xf6, 0x7a, 0x30, 0x71, 0xfc, 0x59, 0x64, 0x5e, 0xea, 0xf0, 0xef, 0x9b,
	0xf9, 0xff, 0xb5, 0x13, 0xbb, 0x75, 0x10, 0xcd, 0xde, 0xa5, 0xa5, 0xf8, 0xfe, 0x1c, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0xcd, 0x27, 0x9e, 0x33, 0x02, 0x00, 0x00,
}
