// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggezchain/trade/trade_data.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradeData struct {
	TradeInfo *TradeInfo `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Brokerage *Brokerage `protobuf:"bytes,2,opt,name=brokerage,proto3" json:"brokerage,omitempty"`
}

func (m *TradeData) Reset()         { *m = TradeData{} }
func (m *TradeData) String() string { return proto.CompactTextString(m) }
func (*TradeData) ProtoMessage()    {}
func (*TradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_48bddbd32b8de3ed, []int{0}
}
func (m *TradeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeData.Merge(m, src)
}
func (m *TradeData) XXX_Size() int {
	return m.Size()
}
func (m *TradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeData.DiscardUnknown(m)
}

var xxx_messageInfo_TradeData proto.InternalMessageInfo

func (m *TradeData) GetTradeInfo() *TradeInfo {
	if m != nil {
		return m.TradeInfo
	}
	return nil
}

func (m *TradeData) GetBrokerage() *Brokerage {
	if m != nil {
		return m.Brokerage
	}
	return nil
}

type TradeInfo struct {
	AssetHolderId uint64    `protobuf:"varint,1,opt,name=asset_holder_id,json=assetHolderId,proto3" json:"asset_holder_id,omitempty"`
	AssetId       uint64    `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TradeType     TradeType `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3,enum=ggezchain.trade.TradeType" json:"trade_type,omitempty"`
	TradeValue    float64   `protobuf:"fixed64,4,opt,name=trade_value,json=tradeValue,proto3" json:"trade_value,omitempty"`
	Currency      string    `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Exchange      string    `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	FundName      string    `protobuf:"bytes,7,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	Issuer        string    `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	NoShares      uint64    `protobuf:"varint,9,opt,name=no_shares,json=noShares,proto3" json:"no_shares,omitempty"`
	Price         float64   `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      uint64    `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Segment       string    `protobuf:"bytes,12,opt,name=segment,proto3" json:"segment,omitempty"`
	SharePrice    float64   `protobuf:"fixed64,13,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	Ticker        string    `protobuf:"bytes,14,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TradeFee      float64   `protobuf:"fixed64,15,opt,name=trade_fee,json=tradeFee,proto3" json:"trade_fee,omitempty"`
	TradeNetPrice float64   `protobuf:"fixed64,16,opt,name=trade_net_price,json=tradeNetPrice,proto3" json:"trade_net_price,omitempty"`
	TradeNetValue float64   `protobuf:"fixed64,17,opt,name=trade_net_value,json=tradeNetValue,proto3" json:"trade_net_value,omitempty"`
}

func (m *TradeInfo) Reset()         { *m = TradeInfo{} }
func (m *TradeInfo) String() string { return proto.CompactTextString(m) }
func (*TradeInfo) ProtoMessage()    {}
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_48bddbd32b8de3ed, []int{1}
}
func (m *TradeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeInfo.Merge(m, src)
}
func (m *TradeInfo) XXX_Size() int {
	return m.Size()
}
func (m *TradeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TradeInfo proto.InternalMessageInfo

func (m *TradeInfo) GetAssetHolderId() uint64 {
	if m != nil {
		return m.AssetHolderId
	}
	return 0
}

func (m *TradeInfo) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *TradeInfo) GetTradeType() TradeType {
	if m != nil {
		return m.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (m *TradeInfo) GetTradeValue() float64 {
	if m != nil {
		return m.TradeValue
	}
	return 0
}

func (m *TradeInfo) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradeInfo) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *TradeInfo) GetFundName() string {
	if m != nil {
		return m.FundName
	}
	return ""
}

func (m *TradeInfo) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *TradeInfo) GetNoShares() uint64 {
	if m != nil {
		return m.NoShares
	}
	return 0
}

func (m *TradeInfo) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeInfo) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *TradeInfo) GetSegment() string {
	if m != nil {
		return m.Segment
	}
	return ""
}

func (m *TradeInfo) GetSharePrice() float64 {
	if m != nil {
		return m.SharePrice
	}
	return 0
}

func (m *TradeInfo) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *TradeInfo) GetTradeFee() float64 {
	if m != nil {
		return m.TradeFee
	}
	return 0
}

func (m *TradeInfo) GetTradeNetPrice() float64 {
	if m != nil {
		return m.TradeNetPrice
	}
	return 0
}

func (m *TradeInfo) GetTradeNetValue() float64 {
	if m != nil {
		return m.TradeNetValue
	}
	return 0
}

type Brokerage struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *Brokerage) Reset()         { *m = Brokerage{} }
func (m *Brokerage) String() string { return proto.CompactTextString(m) }
func (*Brokerage) ProtoMessage()    {}
func (*Brokerage) Descriptor() ([]byte, []int) {
	return fileDescriptor_48bddbd32b8de3ed, []int{2}
}
func (m *Brokerage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Brokerage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Brokerage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Brokerage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brokerage.Merge(m, src)
}
func (m *Brokerage) XXX_Size() int {
	return m.Size()
}
func (m *Brokerage) XXX_DiscardUnknown() {
	xxx_messageInfo_Brokerage.DiscardUnknown(m)
}

var xxx_messageInfo_Brokerage proto.InternalMessageInfo

func (m *Brokerage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Brokerage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Brokerage) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func init() {
	proto.RegisterType((*TradeData)(nil), "ggezchain.trade.TradeData")
	proto.RegisterType((*TradeInfo)(nil), "ggezchain.trade.TradeInfo")
	proto.RegisterType((*Brokerage)(nil), "ggezchain.trade.Brokerage")
}

func init() { proto.RegisterFile("ggezchain/trade/trade_data.proto", fileDescriptor_48bddbd32b8de3ed) }

var fileDescriptor_48bddbd32b8de3ed = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x96, 0x34, 0x89, 0x37, 0xa4, 0x81, 0x15, 0xaa, 0x96, 0x54, 0x32, 0x51, 0x0e, 0x28,
	0x12, 0x52, 0x22, 0xc1, 0x05, 0xae, 0x15, 0xa5, 0x44, 0x82, 0x0a, 0x99, 0x8a, 0x43, 0x2f, 0xd6,
	0xc6, 0x9e, 0xd8, 0x56, 0x9b, 0x5d, 0xb3, 0x5e, 0xa3, 0x9a, 0x13, 0x9f, 0xc0, 0x57, 0xf0, 0x2d,
	0x1c, 0x7b, 0xe4, 0x88, 0x92, 0x1f, 0x41, 0x3b, 0x1b, 0x27, 0x2a, 0x6a, 0x2f, 0xd6, 0xbc, 0x37,
	0x6f, 0xde, 0xce, 0x8c, 0x77, 0xe9, 0x30, 0x49, 0xe0, 0x7b, 0x94, 0x8a, 0x4c, 0x4e, 0x8d, 0x16,
	0x31, 0xb8, 0x6f, 0x18, 0x0b, 0x23, 0x26, 0xb9, 0x56, 0x46, 0xb1, 0xfe, 0x56, 0x31, 0xc1, 0xdc,
	0xe0, 0xe8, 0xce, 0x12, 0xa7, 0x1e, 0xfd, 0x20, 0xd4, 0x3b, 0xb7, 0xf8, 0xad, 0x30, 0x82, 0xbd,
	0xa1, 0xd4, 0xf9, 0x65, 0x72, 0xa1, 0x38, 0x19, 0x92, 0x71, 0xf7, 0xe5, 0x60, 0xf2, 0x9f, 0xe1,
	0x04, 0xf5, 0x33, 0xb9, 0x50, 0x81, 0x67, 0xea, 0x90, 0xbd, 0xa6, 0xde, 0x5c, 0xab, 0x4b, 0xd0,
	0x22, 0x01, 0xbe, 0x77, 0x4f, 0xe5, 0x71, 0xad, 0x08, 0x76, 0xe2, 0xd1, 0xaf, 0xe6, 0xa6, 0x05,
	0xf4, 0x79, 0x4e, 0xfb, 0xa2, 0x28, 0xc0, 0x84, 0xa9, 0xba, 0x8a, 0x41, 0x87, 0x59, 0x8c, 0x7d,
	0x34, 0x83, 0x1e, 0xd2, 0xef, 0x91, 0x9d, 0xc5, 0xec, 0x29, 0xed, 0x38, 0x5d, 0x16, 0xe3, 0x71,
	0xcd, 0xa0, 0x8d, 0x78, 0x16, 0xef, 0xa6, 0x30, 0x55, 0x0e, 0xfc, 0xc1, 0x90, 0x8c, 0x0f, 0xee,
	0x9b, 0xe2, 0xbc, 0xca, 0x61, 0x33, 0x85, 0x0d, 0xd9, 0x33, 0xda, 0x75, 0xa5, 0xdf, 0xc4, 0x55,
	0x09, 0xbc, 0x39, 0x24, 0x63, 0x12, 0x38, 0xb7, 0x2f, 0x96, 0x61, 0x03, 0xda, 0x89, 0x4a, 0xad,
	0x41, 0x46, 0x15, 0xdf, 0x1f, 0x92, 0xb1, 0x17, 0x6c, 0xb1, 0xcd, 0xc1, 0x75, 0x94, 0x0a, 0x99,
	0x00, 0x6f, 0xb9, 0x5c, 0x8d, 0xd9, 0x11, 0xf5, 0x16, 0xa5, 0x8c, 0x43, 0x29, 0x96, 0xc0, 0xdb,
	0x2e, 0x69, 0x89, 0x33, 0xb1, 0x04, 0x76, 0x48, 0x5b, 0x59, 0x51, 0x94, 0xa0, 0x79, 0x07, 0x33,
	0x1b, 0x64, 0x8b, 0xa4, 0x0a, 0x8b, 0x54, 0x68, 0x28, 0xb8, 0x87, 0x43, 0x76, 0xa4, 0xfa, 0x8c,
	0x98, 0x3d, 0xa1, 0xfb, 0xb9, 0xce, 0x22, 0xe0, 0x14, 0x9b, 0x74, 0xc0, 0xf6, 0xf0, 0xb5, 0x14,
	0xd2, 0x64, 0xa6, 0xe2, 0x5d, 0x57, 0x51, 0x63, 0xc6, 0x69, 0xbb, 0x80, 0x64, 0x09, 0xd2, 0xf0,
	0x87, 0x78, 0x4e, 0x0d, 0xed, 0xd8, 0x78, 0x4a, 0xe8, 0x1c, 0x7b, 0x6e, 0x6c, 0xa4, 0x3e, 0xa1,
	0xed, 0x21, 0x6d, 0x99, 0x2c, 0xba, 0x04, 0xcd, 0x0f, 0x5c, 0x87, 0x0e, 0xd9, 0x0e, 0xdd, 0xbe,
	0x16, 0x00, 0xbc, 0x8f, 0x65, 0x1d, 0x24, 0xde, 0x01, 0xd8, 0x5f, 0xe9, 0x92, 0x12, 0xcc, 0xc6,
	0xf9, 0x11, 0x4a, 0x7a, 0x48, 0x9f, 0x81, 0x71, 0xe6, 0xb7, 0x74, 0x6e, 0xf1, 0x8f, 0x6f, 0xeb,
	0x70, 0xf7, 0xa3, 0x8f, 0xd4, 0xdb, 0x5e, 0x20, 0xc6, 0x68, 0x13, 0x77, 0x49, 0xb0, 0x1f, 0x8c,
	0x2d, 0x87, 0xbf, 0x7c, 0xcf, 0x71, 0x36, 0xb6, 0x43, 0x47, 0xaa, 0x94, 0x46, 0x57, 0x78, 0x13,
	0xbc, 0xa0, 0x86, 0xc7, 0x27, 0xbf, 0x57, 0x3e, 0xb9, 0x59, 0xf9, 0xe4, 0xef, 0xca, 0x27, 0x3f,
	0xd7, 0x7e, 0xe3, 0x66, 0xed, 0x37, 0xfe, 0xac, 0xfd, 0xc6, 0xc5, 0x8b, 0x24, 0x33, 0x69, 0x39,
	0x9f, 0x44, 0x6a, 0x39, 0x3d, 0x3d, 0x3d, 0xb9, 0xf8, 0x20, 0xe6, 0xc5, 0x74, 0xf7, 0x8a, 0xae,
	0xeb, 0x77, 0x54, 0xe5, 0x50, 0xcc, 0x5b, 0xf8, 0x90, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x91, 0x92, 0x4f, 0x27, 0x9a, 0x03, 0x00, 0x00,
}

func (m *TradeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Brokerage != nil {
		{
			size, err := m.Brokerage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradeData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TradeInfo != nil {
		{
			size, err := m.TradeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradeData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeNetValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TradeNetValue))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.TradeNetPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TradeNetPrice))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.TradeFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TradeFee))))
		i--
		dAtA[i] = 0x79
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x72
	}
	if m.SharePrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SharePrice))))
		i--
		dAtA[i] = 0x69
	}
	if len(m.Segment) > 0 {
		i -= len(m.Segment)
		copy(dAtA[i:], m.Segment)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Segment)))
		i--
		dAtA[i] = 0x62
	}
	if m.Quantity != 0 {
		i = encodeVarintTradeData(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x58
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x51
	}
	if m.NoShares != 0 {
		i = encodeVarintTradeData(dAtA, i, uint64(m.NoShares))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FundName) > 0 {
		i -= len(m.FundName)
		copy(dAtA[i:], m.FundName)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.FundName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Exchange) > 0 {
		i -= len(m.Exchange)
		copy(dAtA[i:], m.Exchange)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Exchange)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TradeValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TradeValue))))
		i--
		dAtA[i] = 0x21
	}
	if m.TradeType != 0 {
		i = encodeVarintTradeData(dAtA, i, uint64(m.TradeType))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetId != 0 {
		i = encodeVarintTradeData(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetHolderId != 0 {
		i = encodeVarintTradeData(dAtA, i, uint64(m.AssetHolderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Brokerage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Brokerage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Brokerage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTradeData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradeData(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradeData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeInfo != nil {
		l = m.TradeInfo.Size()
		n += 1 + l + sovTradeData(uint64(l))
	}
	if m.Brokerage != nil {
		l = m.Brokerage.Size()
		n += 1 + l + sovTradeData(uint64(l))
	}
	return n
}

func (m *TradeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetHolderId != 0 {
		n += 1 + sovTradeData(uint64(m.AssetHolderId))
	}
	if m.AssetId != 0 {
		n += 1 + sovTradeData(uint64(m.AssetId))
	}
	if m.TradeType != 0 {
		n += 1 + sovTradeData(uint64(m.TradeType))
	}
	if m.TradeValue != 0 {
		n += 9
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	l = len(m.Exchange)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	l = len(m.FundName)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	if m.NoShares != 0 {
		n += 1 + sovTradeData(uint64(m.NoShares))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.Quantity != 0 {
		n += 1 + sovTradeData(uint64(m.Quantity))
	}
	l = len(m.Segment)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	if m.SharePrice != 0 {
		n += 9
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	if m.TradeFee != 0 {
		n += 9
	}
	if m.TradeNetPrice != 0 {
		n += 10
	}
	if m.TradeNetValue != 0 {
		n += 10
	}
	return n
}

func (m *Brokerage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTradeData(uint64(l))
	}
	return n
}

func sovTradeData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradeData(x uint64) (n int) {
	return sovTradeData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradeInfo == nil {
				m.TradeInfo = &TradeInfo{}
			}
			if err := m.TradeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brokerage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Brokerage == nil {
				m.Brokerage = &Brokerage{}
			}
			if err := m.Brokerage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetHolderId", wireType)
			}
			m.AssetHolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetHolderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeType", wireType)
			}
			m.TradeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeType |= TradeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TradeValue = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoShares", wireType)
			}
			m.NoShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoShares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SharePrice = float64(math.Float64frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TradeFee = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeNetPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TradeNetPrice = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeNetValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TradeNetValue = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTradeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Brokerage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Brokerage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Brokerage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradeData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradeData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradeData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradeData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradeData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradeData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradeData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradeData = fmt.Errorf("proto: unexpected end of group")
)
