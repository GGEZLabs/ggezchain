// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggezchain/trade/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct{}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{0}
}

func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}

func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{1}
}

func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}

func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetTradeIndexRequest struct{}

func (m *QueryGetTradeIndexRequest) Reset()         { *m = QueryGetTradeIndexRequest{} }
func (m *QueryGetTradeIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeIndexRequest) ProtoMessage()    {}
func (*QueryGetTradeIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{2}
}

func (m *QueryGetTradeIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetTradeIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetTradeIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeIndexRequest.Merge(m, src)
}

func (m *QueryGetTradeIndexRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetTradeIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeIndexRequest proto.InternalMessageInfo

type QueryGetTradeIndexResponse struct {
	TradeIndex TradeIndex `protobuf:"bytes,1,opt,name=trade_index,json=tradeIndex,proto3" json:"trade_index"`
}

func (m *QueryGetTradeIndexResponse) Reset()         { *m = QueryGetTradeIndexResponse{} }
func (m *QueryGetTradeIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeIndexResponse) ProtoMessage()    {}
func (*QueryGetTradeIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{3}
}

func (m *QueryGetTradeIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetTradeIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetTradeIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeIndexResponse.Merge(m, src)
}

func (m *QueryGetTradeIndexResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetTradeIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeIndexResponse proto.InternalMessageInfo

func (m *QueryGetTradeIndexResponse) GetTradeIndex() TradeIndex {
	if m != nil {
		return m.TradeIndex
	}
	return TradeIndex{}
}

type QueryGetStoredTradeRequest struct {
	TradeIndex uint64 `protobuf:"varint,1,opt,name=trade_index,json=tradeIndex,proto3" json:"trade_index,omitempty"`
}

func (m *QueryGetStoredTradeRequest) Reset()         { *m = QueryGetStoredTradeRequest{} }
func (m *QueryGetStoredTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredTradeRequest) ProtoMessage()    {}
func (*QueryGetStoredTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{4}
}

func (m *QueryGetStoredTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetStoredTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetStoredTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredTradeRequest.Merge(m, src)
}

func (m *QueryGetStoredTradeRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetStoredTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredTradeRequest proto.InternalMessageInfo

func (m *QueryGetStoredTradeRequest) GetTradeIndex() uint64 {
	if m != nil {
		return m.TradeIndex
	}
	return 0
}

type QueryGetStoredTradeResponse struct {
	StoredTrade StoredTrade `protobuf:"bytes,1,opt,name=stored_trade,json=storedTrade,proto3" json:"stored_trade"`
}

func (m *QueryGetStoredTradeResponse) Reset()         { *m = QueryGetStoredTradeResponse{} }
func (m *QueryGetStoredTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredTradeResponse) ProtoMessage()    {}
func (*QueryGetStoredTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{5}
}

func (m *QueryGetStoredTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetStoredTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetStoredTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredTradeResponse.Merge(m, src)
}

func (m *QueryGetStoredTradeResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetStoredTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredTradeResponse proto.InternalMessageInfo

func (m *QueryGetStoredTradeResponse) GetStoredTrade() StoredTrade {
	if m != nil {
		return m.StoredTrade
	}
	return StoredTrade{}
}

type QueryAllStoredTradeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredTradeRequest) Reset()         { *m = QueryAllStoredTradeRequest{} }
func (m *QueryAllStoredTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredTradeRequest) ProtoMessage()    {}
func (*QueryAllStoredTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{6}
}

func (m *QueryAllStoredTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryAllStoredTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryAllStoredTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredTradeRequest.Merge(m, src)
}

func (m *QueryAllStoredTradeRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryAllStoredTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredTradeRequest proto.InternalMessageInfo

func (m *QueryAllStoredTradeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredTradeResponse struct {
	StoredTrade []StoredTrade       `protobuf:"bytes,1,rep,name=stored_trade,json=storedTrade,proto3" json:"stored_trade"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredTradeResponse) Reset()         { *m = QueryAllStoredTradeResponse{} }
func (m *QueryAllStoredTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredTradeResponse) ProtoMessage()    {}
func (*QueryAllStoredTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{7}
}

func (m *QueryAllStoredTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryAllStoredTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryAllStoredTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredTradeResponse.Merge(m, src)
}

func (m *QueryAllStoredTradeResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryAllStoredTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredTradeResponse proto.InternalMessageInfo

func (m *QueryAllStoredTradeResponse) GetStoredTrade() []StoredTrade {
	if m != nil {
		return m.StoredTrade
	}
	return nil
}

func (m *QueryAllStoredTradeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredTempTradeRequest struct {
	TradeIndex uint64 `protobuf:"varint,1,opt,name=trade_index,json=tradeIndex,proto3" json:"trade_index,omitempty"`
}

func (m *QueryGetStoredTempTradeRequest) Reset()         { *m = QueryGetStoredTempTradeRequest{} }
func (m *QueryGetStoredTempTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredTempTradeRequest) ProtoMessage()    {}
func (*QueryGetStoredTempTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{8}
}

func (m *QueryGetStoredTempTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetStoredTempTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredTempTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetStoredTempTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredTempTradeRequest.Merge(m, src)
}

func (m *QueryGetStoredTempTradeRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetStoredTempTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredTempTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredTempTradeRequest proto.InternalMessageInfo

func (m *QueryGetStoredTempTradeRequest) GetTradeIndex() uint64 {
	if m != nil {
		return m.TradeIndex
	}
	return 0
}

type QueryGetStoredTempTradeResponse struct {
	StoredTempTrade StoredTempTrade `protobuf:"bytes,1,opt,name=stored_temp_trade,json=storedTempTrade,proto3" json:"stored_temp_trade"`
}

func (m *QueryGetStoredTempTradeResponse) Reset()         { *m = QueryGetStoredTempTradeResponse{} }
func (m *QueryGetStoredTempTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredTempTradeResponse) ProtoMessage()    {}
func (*QueryGetStoredTempTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{9}
}

func (m *QueryGetStoredTempTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryGetStoredTempTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredTempTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryGetStoredTempTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredTempTradeResponse.Merge(m, src)
}

func (m *QueryGetStoredTempTradeResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryGetStoredTempTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredTempTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredTempTradeResponse proto.InternalMessageInfo

func (m *QueryGetStoredTempTradeResponse) GetStoredTempTrade() StoredTempTrade {
	if m != nil {
		return m.StoredTempTrade
	}
	return StoredTempTrade{}
}

type QueryAllStoredTempTradeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredTempTradeRequest) Reset()         { *m = QueryAllStoredTempTradeRequest{} }
func (m *QueryAllStoredTempTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredTempTradeRequest) ProtoMessage()    {}
func (*QueryAllStoredTempTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{10}
}

func (m *QueryAllStoredTempTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryAllStoredTempTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredTempTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryAllStoredTempTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredTempTradeRequest.Merge(m, src)
}

func (m *QueryAllStoredTempTradeRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryAllStoredTempTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredTempTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredTempTradeRequest proto.InternalMessageInfo

func (m *QueryAllStoredTempTradeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredTempTradeResponse struct {
	StoredTempTrade []StoredTempTrade   `protobuf:"bytes,1,rep,name=stored_temp_trade,json=storedTempTrade,proto3" json:"stored_temp_trade"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredTempTradeResponse) Reset()         { *m = QueryAllStoredTempTradeResponse{} }
func (m *QueryAllStoredTempTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredTempTradeResponse) ProtoMessage()    {}
func (*QueryAllStoredTempTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af22ba7e83aace9b, []int{11}
}

func (m *QueryAllStoredTempTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryAllStoredTempTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredTempTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryAllStoredTempTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredTempTradeResponse.Merge(m, src)
}

func (m *QueryAllStoredTempTradeResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryAllStoredTempTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredTempTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredTempTradeResponse proto.InternalMessageInfo

func (m *QueryAllStoredTempTradeResponse) GetStoredTempTrade() []StoredTempTrade {
	if m != nil {
		return m.StoredTempTrade
	}
	return nil
}

func (m *QueryAllStoredTempTradeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ggezchain.trade.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ggezchain.trade.QueryParamsResponse")
	proto.RegisterType((*QueryGetTradeIndexRequest)(nil), "ggezchain.trade.QueryGetTradeIndexRequest")
	proto.RegisterType((*QueryGetTradeIndexResponse)(nil), "ggezchain.trade.QueryGetTradeIndexResponse")
	proto.RegisterType((*QueryGetStoredTradeRequest)(nil), "ggezchain.trade.QueryGetStoredTradeRequest")
	proto.RegisterType((*QueryGetStoredTradeResponse)(nil), "ggezchain.trade.QueryGetStoredTradeResponse")
	proto.RegisterType((*QueryAllStoredTradeRequest)(nil), "ggezchain.trade.QueryAllStoredTradeRequest")
	proto.RegisterType((*QueryAllStoredTradeResponse)(nil), "ggezchain.trade.QueryAllStoredTradeResponse")
	proto.RegisterType((*QueryGetStoredTempTradeRequest)(nil), "ggezchain.trade.QueryGetStoredTempTradeRequest")
	proto.RegisterType((*QueryGetStoredTempTradeResponse)(nil), "ggezchain.trade.QueryGetStoredTempTradeResponse")
	proto.RegisterType((*QueryAllStoredTempTradeRequest)(nil), "ggezchain.trade.QueryAllStoredTempTradeRequest")
	proto.RegisterType((*QueryAllStoredTempTradeResponse)(nil), "ggezchain.trade.QueryAllStoredTempTradeResponse")
}

func init() { proto.RegisterFile("ggezchain/trade/query.proto", fileDescriptor_af22ba7e83aace9b) }

var fileDescriptor_af22ba7e83aace9b = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xc0, 0x8f, 0x5f, 0x9c, 0x1a, 0x09, 0x23, 0x89, 0xba, 0x25, 0x0b, 0xae, 0x0a,
	0x04, 0x64, 0x47, 0xc0, 0x98, 0xf8, 0xef, 0xd0, 0x26, 0xd8, 0x98, 0x78, 0x80, 0xea, 0x89, 0x0b,
	0x4e, 0xe9, 0x64, 0xd9, 0xa4, 0xdd, 0x59, 0x3a, 0x5b, 0x03, 0x1a, 0x2e, 0xbe, 0x02, 0x13, 0xbd,
	0x79, 0x37, 0x1e, 0x34, 0xf1, 0xe6, 0xcd, 0x33, 0x17, 0x13, 0x12, 0x2f, 0x9e, 0x8c, 0xa1, 0x26,
	0xbe, 0x0d, 0xb3, 0xb3, 0x4f, 0xbb, 0xdb, 0xfd, 0x43, 0x8b, 0x72, 0xd9, 0x4c, 0x67, 0x9e, 0xe7,
	0xf9, 0x7e, 0x9e, 0x67, 0x9e, 0x79, 0x52, 0x5c, 0xb0, 0x2c, 0xfe, 0x7c, 0x6b, 0x9b, 0xd9, 0x0e,
	0xf5, 0x9a, 0xac, 0xc6, 0xe9, 0x4e, 0x8b, 0x37, 0xf7, 0x4c, 0xb7, 0x29, 0x3c, 0x41, 0xc6, 0xba,
	0x87, 0xa6, 0x3a, 0xd4, 0xc6, 0x59, 0xc3, 0x76, 0x04, 0x55, 0xdf, 0xc0, 0x46, 0x9b, 0xb0, 0x84,
	0x25, 0xd4, 0x92, 0xfa, 0x2b, 0xd8, 0x9d, 0xb4, 0x84, 0xb0, 0xea, 0x9c, 0x32, 0xd7, 0xa6, 0xcc,
	0x71, 0x84, 0xc7, 0x3c, 0x5b, 0x38, 0x12, 0x4e, 0xe7, 0xb7, 0x84, 0x6c, 0x08, 0x49, 0xab, 0x4c,
	0x82, 0x20, 0x7d, 0xb6, 0x54, 0xe5, 0x1e, 0x5b, 0xa2, 0x2e, 0xb3, 0x6c, 0x47, 0x19, 0x77, 0x23,
	0xc5, 0x00, 0x5d, 0xd6, 0x64, 0x8d, 0x4e, 0xa4, 0xcb, 0xf1, 0x53, 0xf5, 0xdd, 0xb4, 0x9d, 0x1a,
	0xdf, 0x05, 0x13, 0x23, 0x6e, 0x22, 0x3d, 0xd1, 0xe4, 0xb5, 0x4d, 0xf5, 0x03, 0x6c, 0x66, 0xb3,
	0x6c, 0x78, 0xc3, 0x8d, 0x1a, 0x1a, 0x13, 0x98, 0xac, 0xfb, 0xbc, 0x6b, 0x0a, 0xa2, 0xc2, 0x77,
	0x5a, 0x5c, 0x7a, 0xc6, 0x3a, 0x3e, 0xdf, 0xb3, 0x2b, 0x5d, 0xe1, 0x48, 0x4e, 0xee, 0xe0, 0xd1,
	0x00, 0xf6, 0x22, 0x9a, 0x46, 0x73, 0xf9, 0xe5, 0x0b, 0x66, 0xac, 0x9e, 0x66, 0xe0, 0x50, 0x3a,
	0x73, 0xf0, 0x63, 0x2a, 0xf7, 0xfe, 0xf7, 0xa7, 0x79, 0x54, 0x01, 0x0f, 0xa3, 0x80, 0x2f, 0xa9,
	0x90, 0x65, 0xee, 0x3d, 0xf1, 0x4d, 0x1f, 0xfa, 0x19, 0x75, 0xf4, 0x9e, 0x62, 0x2d, 0xed, 0x10,
	0x64, 0x4b, 0x38, 0x1f, 0xa9, 0x02, 0x68, 0x17, 0x12, 0xda, 0xa1, 0x67, 0x69, 0xc4, 0xd7, 0xaf,
	0x60, 0xaf, 0xbb, 0x63, 0xdc, 0x0f, 0x15, 0x1e, 0xab, 0x52, 0x28, 0x6b, 0xd0, 0x27, 0x53, 0x49,
	0x85, 0x91, 0x1e, 0xf7, 0x1a, 0x2e, 0xa4, 0xba, 0x03, 0xe1, 0x2a, 0x3e, 0x1b, 0xbd, 0x04, 0x40,
	0x9c, 0x4c, 0x20, 0x46, 0x7c, 0x81, 0x31, 0x2f, 0xc3, 0x2d, 0xa3, 0x06, 0x90, 0xc5, 0x7a, 0x3d,
	0x05, 0xf2, 0x01, 0xc6, 0x61, 0x33, 0x81, 0xc4, 0x8c, 0x19, 0x74, 0x9e, 0xe9, 0x77, 0x9e, 0x19,
	0xb4, 0x3a, 0x74, 0x9e, 0xb9, 0xc6, 0xac, 0x8e, 0x6f, 0x25, 0xe2, 0x69, 0x7c, 0x44, 0x90, 0x4c,
	0x5c, 0x26, 0x33, 0x99, 0xe1, 0xbf, 0x48, 0x86, 0x94, 0x7b, 0x70, 0x87, 0x14, 0xee, 0x6c, 0x5f,
	0xdc, 0x80, 0xa1, 0x87, 0xb7, 0x88, 0xf5, 0x58, 0xed, 0x79, 0xc3, 0x3d, 0xd9, 0xf5, 0xb5, 0xf0,
	0x54, 0x66, 0x08, 0xc8, 0xba, 0x82, 0xc7, 0x13, 0x6f, 0x04, 0x8a, 0x3c, 0x9d, 0x95, 0x7a, 0x27,
	0x08, 0xa4, 0x3f, 0x26, 0x7b, 0xb7, 0x8d, 0x6d, 0x20, 0x0f, 0x0b, 0x1d, 0x27, 0x3f, 0xad, 0x3b,
	0xfd, 0x82, 0x20, 0xc3, 0x34, 0xa9, 0xe3, 0x33, 0x1c, 0xfe, 0x87, 0x0c, 0x4f, 0xed, 0x92, 0x97,
	0xbf, 0xfe, 0x8f, 0xff, 0x53, 0x09, 0x90, 0x7d, 0x3c, 0x1a, 0x4c, 0x11, 0x72, 0x25, 0x41, 0x95,
	0x1c, 0x55, 0xda, 0xd5, 0xe3, 0x8d, 0x02, 0x29, 0x63, 0xee, 0xe5, 0xb7, 0x5f, 0xaf, 0x87, 0x0c,
	0x32, 0x4d, 0xcb, 0xe5, 0xd5, 0x8d, 0x47, 0xac, 0x2a, 0x69, 0xfa, 0x18, 0x26, 0x6f, 0x10, 0xc6,
	0xe1, 0x24, 0x21, 0xf3, 0xe9, 0xe1, 0xd3, 0xa6, 0x98, 0xb6, 0x30, 0x90, 0x2d, 0x10, 0x2d, 0x2a,
	0xa2, 0x59, 0x72, 0x2d, 0x9b, 0x28, 0xd2, 0xd3, 0xe4, 0x1d, 0xc2, 0xf9, 0xc8, 0x83, 0x23, 0xd9,
	0x5a, 0xc9, 0xc9, 0xa1, 0x5d, 0x1f, 0xcc, 0x18, 0xc8, 0xee, 0x29, 0xb2, 0x5b, 0xe4, 0x66, 0x36,
	0x59, 0x74, 0x3e, 0xd0, 0x17, 0x11, 0xce, 0x7d, 0xf2, 0x16, 0xe1, 0x73, 0x91, 0xa8, 0xc5, 0x7a,
	0x3d, 0x8b, 0x35, 0x75, 0xca, 0x65, 0xb1, 0xa6, 0xcf, 0x2a, 0xc3, 0x54, 0xac, 0x73, 0x64, 0x66,
	0x30, 0x56, 0xf2, 0x19, 0xe1, 0xb1, 0x58, 0x6b, 0x13, 0xda, 0xaf, 0x3a, 0xb1, 0x47, 0xab, 0xdd,
	0x18, 0xdc, 0x01, 0x30, 0x8b, 0x0a, 0xf3, 0x2e, 0xb9, 0xdd, 0x1f, 0xb3, 0xfb, 0x34, 0x63, 0x75,
	0xfd, 0x80, 0x30, 0x89, 0x85, 0xf7, 0x6b, 0x4b, 0xfb, 0x95, 0x6b, 0x40, 0xf8, 0xec, 0xb9, 0x61,
	0xac, 0x28, 0xf8, 0x45, 0xb2, 0x70, 0x02, 0xf8, 0xd2, 0xea, 0xc1, 0x91, 0x8e, 0x0e, 0x8f, 0x74,
	0xf4, 0xf3, 0x48, 0x47, 0xaf, 0xda, 0x7a, 0xee, 0xb0, 0xad, 0xe7, 0xbe, 0xb7, 0xf5, 0xdc, 0xc6,
	0x82, 0x65, 0x7b, 0xdb, 0xad, 0xaa, 0xb9, 0x25, 0x1a, 0x69, 0x01, 0x77, 0x3b, 0xcd, 0xbf, 0xe7,
	0x72, 0x59, 0x1d, 0x55, 0xff, 0x52, 0x56, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x77, 0x64, 0x51,
	0x07, 0xd6, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a TradeIndex by index.
	TradeIndex(ctx context.Context, in *QueryGetTradeIndexRequest, opts ...grpc.CallOption) (*QueryGetTradeIndexResponse, error)
	// Queries a list of StoredTrade items.
	StoredTrade(ctx context.Context, in *QueryGetStoredTradeRequest, opts ...grpc.CallOption) (*QueryGetStoredTradeResponse, error)
	StoredTradeAll(ctx context.Context, in *QueryAllStoredTradeRequest, opts ...grpc.CallOption) (*QueryAllStoredTradeResponse, error)
	// Queries a list of StoredTempTrade items.
	StoredTempTrade(ctx context.Context, in *QueryGetStoredTempTradeRequest, opts ...grpc.CallOption) (*QueryGetStoredTempTradeResponse, error)
	StoredTempTradeAll(ctx context.Context, in *QueryAllStoredTempTradeRequest, opts ...grpc.CallOption) (*QueryAllStoredTempTradeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeIndex(ctx context.Context, in *QueryGetTradeIndexRequest, opts ...grpc.CallOption) (*QueryGetTradeIndexResponse, error) {
	out := new(QueryGetTradeIndexResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/TradeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredTrade(ctx context.Context, in *QueryGetStoredTradeRequest, opts ...grpc.CallOption) (*QueryGetStoredTradeResponse, error) {
	out := new(QueryGetStoredTradeResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/StoredTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredTradeAll(ctx context.Context, in *QueryAllStoredTradeRequest, opts ...grpc.CallOption) (*QueryAllStoredTradeResponse, error) {
	out := new(QueryAllStoredTradeResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/StoredTradeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredTempTrade(ctx context.Context, in *QueryGetStoredTempTradeRequest, opts ...grpc.CallOption) (*QueryGetStoredTempTradeResponse, error) {
	out := new(QueryGetStoredTempTradeResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/StoredTempTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredTempTradeAll(ctx context.Context, in *QueryAllStoredTempTradeRequest, opts ...grpc.CallOption) (*QueryAllStoredTempTradeResponse, error) {
	out := new(QueryAllStoredTempTradeResponse)
	err := c.cc.Invoke(ctx, "/ggezchain.trade.Query/StoredTempTradeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a TradeIndex by index.
	TradeIndex(context.Context, *QueryGetTradeIndexRequest) (*QueryGetTradeIndexResponse, error)
	// Queries a list of StoredTrade items.
	StoredTrade(context.Context, *QueryGetStoredTradeRequest) (*QueryGetStoredTradeResponse, error)
	StoredTradeAll(context.Context, *QueryAllStoredTradeRequest) (*QueryAllStoredTradeResponse, error)
	// Queries a list of StoredTempTrade items.
	StoredTempTrade(context.Context, *QueryGetStoredTempTradeRequest) (*QueryGetStoredTempTradeResponse, error)
	StoredTempTradeAll(context.Context, *QueryAllStoredTempTradeRequest) (*QueryAllStoredTempTradeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func (*UnimplementedQueryServer) TradeIndex(ctx context.Context, req *QueryGetTradeIndexRequest) (*QueryGetTradeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeIndex not implemented")
}

func (*UnimplementedQueryServer) StoredTrade(ctx context.Context, req *QueryGetStoredTradeRequest) (*QueryGetStoredTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredTrade not implemented")
}

func (*UnimplementedQueryServer) StoredTradeAll(ctx context.Context, req *QueryAllStoredTradeRequest) (*QueryAllStoredTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredTradeAll not implemented")
}

func (*UnimplementedQueryServer) StoredTempTrade(ctx context.Context, req *QueryGetStoredTempTradeRequest) (*QueryGetStoredTempTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredTempTrade not implemented")
}

func (*UnimplementedQueryServer) StoredTempTradeAll(ctx context.Context, req *QueryAllStoredTempTradeRequest) (*QueryAllStoredTempTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredTempTradeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/TradeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeIndex(ctx, req.(*QueryGetTradeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/StoredTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredTrade(ctx, req.(*QueryGetStoredTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredTradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredTradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/StoredTradeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredTradeAll(ctx, req.(*QueryAllStoredTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredTempTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredTempTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredTempTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/StoredTempTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredTempTrade(ctx, req.(*QueryGetStoredTempTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredTempTradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredTempTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredTempTradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ggezchain.trade.Query/StoredTempTradeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredTempTradeAll(ctx, req.(*QueryAllStoredTempTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var (
	Query_serviceDesc  = _Query_serviceDesc
	_Query_serviceDesc = grpc.ServiceDesc{
		ServiceName: "ggezchain.trade.Query",
		HandlerType: (*QueryServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Params",
				Handler:    _Query_Params_Handler,
			},
			{
				MethodName: "TradeIndex",
				Handler:    _Query_TradeIndex_Handler,
			},
			{
				MethodName: "StoredTrade",
				Handler:    _Query_StoredTrade_Handler,
			},
			{
				MethodName: "StoredTradeAll",
				Handler:    _Query_StoredTradeAll_Handler,
			},
			{
				MethodName: "StoredTempTrade",
				Handler:    _Query_StoredTempTrade_Handler,
			},
			{
				MethodName: "StoredTempTradeAll",
				Handler:    _Query_StoredTempTradeAll_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "ggezchain/trade/query.proto",
	}
)

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TradeIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TradeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredTrade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredTrade) > 0 {
		for iNdEx := len(m.StoredTrade) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredTrade[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredTempTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredTempTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredTempTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TradeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredTempTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredTempTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredTempTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredTempTrade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredTempTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredTempTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredTempTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredTempTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredTempTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredTempTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredTempTrade) > 0 {
		for iNdEx := len(m.StoredTempTrade) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredTempTrade[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTradeIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTradeIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradeIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStoredTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeIndex != 0 {
		n += 1 + sovQuery(uint64(m.TradeIndex))
	}
	return n
}

func (m *QueryGetStoredTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredTrade.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredTrade) > 0 {
		for _, e := range m.StoredTrade {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredTempTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeIndex != 0 {
		n += 1 + sovQuery(uint64(m.TradeIndex))
	}
	return n
}

func (m *QueryGetStoredTempTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredTempTrade.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredTempTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredTempTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredTempTrade) > 0 {
		for _, e := range m.StoredTempTrade {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetTradeIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetTradeIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetStoredTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIndex", wireType)
			}
			m.TradeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetStoredTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredTrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredTrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryAllStoredTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryAllStoredTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredTrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredTrade = append(m.StoredTrade, StoredTrade{})
			if err := m.StoredTrade[len(m.StoredTrade)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetStoredTempTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredTempTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredTempTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIndex", wireType)
			}
			m.TradeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryGetStoredTempTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredTempTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredTempTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredTempTrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredTempTrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryAllStoredTempTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredTempTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredTempTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryAllStoredTempTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredTempTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredTempTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredTempTrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredTempTrade = append(m.StoredTempTrade, StoredTempTrade{})
			if err := m.StoredTempTrade[len(m.StoredTempTrade)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
