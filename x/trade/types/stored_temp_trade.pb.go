// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggezchain/trade/stored_temp_trade.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredTempTrade struct {
	TradeIndex uint64 `protobuf:"varint,1,opt,name=trade_index,json=tradeIndex,proto3" json:"trade_index,omitempty"`
	TxDate     string `protobuf:"bytes,2,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
}

func (m *StoredTempTrade) Reset()         { *m = StoredTempTrade{} }
func (m *StoredTempTrade) String() string { return proto.CompactTextString(m) }
func (*StoredTempTrade) ProtoMessage()    {}
func (*StoredTempTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ef1e68a70d7b5c, []int{0}
}
func (m *StoredTempTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredTempTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredTempTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredTempTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredTempTrade.Merge(m, src)
}
func (m *StoredTempTrade) XXX_Size() int {
	return m.Size()
}
func (m *StoredTempTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredTempTrade.DiscardUnknown(m)
}

var xxx_messageInfo_StoredTempTrade proto.InternalMessageInfo

func (m *StoredTempTrade) GetTradeIndex() uint64 {
	if m != nil {
		return m.TradeIndex
	}
	return 0
}

func (m *StoredTempTrade) GetTxDate() string {
	if m != nil {
		return m.TxDate
	}
	return ""
}

func init() {
	proto.RegisterType((*StoredTempTrade)(nil), "ggezchain.trade.StoredTempTrade")
}

func init() {
	proto.RegisterFile("ggezchain/trade/stored_temp_trade.proto", fileDescriptor_42ef1e68a70d7b5c)
}

var fileDescriptor_42ef1e68a70d7b5c = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0x4f, 0x4f, 0xad,
	0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0x29, 0x4a, 0x4c, 0x49, 0xd5, 0x2f, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4d, 0x89, 0x2f, 0x49, 0xcd, 0x2d, 0x88, 0x07, 0x8b, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0xf1, 0xc3, 0x15, 0xea, 0x81, 0x85, 0x95, 0xbc, 0xb9, 0xf8, 0x83, 0xc1, 0x6a, 0x43, 0x52,
	0x73, 0x0b, 0x42, 0x40, 0x42, 0x42, 0xf2, 0x5c, 0xdc, 0x60, 0xb9, 0xf8, 0xcc, 0xbc, 0x94, 0xd4,
	0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x2e, 0xb0, 0x90, 0x27, 0x48, 0x44, 0x48, 0x9c,
	0x8b, 0xbd, 0xa4, 0x22, 0x3e, 0x25, 0xb1, 0x24, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x88,
	0xad, 0xa4, 0xc2, 0x25, 0xb1, 0x24, 0xd5, 0xc9, 0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0xf4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xdd,
	0xdd, 0x5d, 0xa3, 0x7c, 0x12, 0x93, 0x8a, 0xf5, 0x11, 0x8e, 0x2e, 0x33, 0xd2, 0xaf, 0x80, 0xba,
	0xbc, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x5c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x0a, 0xc1, 0xae, 0xd9, 0x00, 0x00, 0x00,
}

func (m *StoredTempTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredTempTrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredTempTrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxDate) > 0 {
		i -= len(m.TxDate)
		copy(dAtA[i:], m.TxDate)
		i = encodeVarintStoredTempTrade(dAtA, i, uint64(len(m.TxDate)))
		i--
		dAtA[i] = 0x12
	}
	if m.TradeIndex != 0 {
		i = encodeVarintStoredTempTrade(dAtA, i, uint64(m.TradeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredTempTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredTempTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredTempTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeIndex != 0 {
		n += 1 + sovStoredTempTrade(uint64(m.TradeIndex))
	}
	l = len(m.TxDate)
	if l > 0 {
		n += 1 + l + sovStoredTempTrade(uint64(l))
	}
	return n
}

func sovStoredTempTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredTempTrade(x uint64) (n int) {
	return sovStoredTempTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredTempTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredTempTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredTempTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredTempTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIndex", wireType)
			}
			m.TradeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTempTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTempTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTempTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTempTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredTempTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredTempTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredTempTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredTempTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredTempTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredTempTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredTempTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredTempTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredTempTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredTempTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredTempTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredTempTrade = fmt.Errorf("proto: unexpected end of group")
)
