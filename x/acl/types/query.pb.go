// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ramichain/acl/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetAclAuthorityRequest defines the QueryGetAclAuthorityRequest message.
type QueryGetAclAuthorityRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAclAuthorityRequest) Reset()         { *m = QueryGetAclAuthorityRequest{} }
func (m *QueryGetAclAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAclAuthorityRequest) ProtoMessage()    {}
func (*QueryGetAclAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{2}
}
func (m *QueryGetAclAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAclAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAclAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAclAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAclAuthorityRequest.Merge(m, src)
}
func (m *QueryGetAclAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAclAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAclAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAclAuthorityRequest proto.InternalMessageInfo

func (m *QueryGetAclAuthorityRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetAclAuthorityResponse defines the QueryGetAclAuthorityResponse message.
type QueryGetAclAuthorityResponse struct {
	AclAuthority AclAuthority `protobuf:"bytes,1,opt,name=acl_authority,json=aclAuthority,proto3" json:"acl_authority"`
}

func (m *QueryGetAclAuthorityResponse) Reset()         { *m = QueryGetAclAuthorityResponse{} }
func (m *QueryGetAclAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAclAuthorityResponse) ProtoMessage()    {}
func (*QueryGetAclAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{3}
}
func (m *QueryGetAclAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAclAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAclAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAclAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAclAuthorityResponse.Merge(m, src)
}
func (m *QueryGetAclAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAclAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAclAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAclAuthorityResponse proto.InternalMessageInfo

func (m *QueryGetAclAuthorityResponse) GetAclAuthority() AclAuthority {
	if m != nil {
		return m.AclAuthority
	}
	return AclAuthority{}
}

// QueryAllAclAuthorityRequest defines the QueryAllAclAuthorityRequest message.
type QueryAllAclAuthorityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAclAuthorityRequest) Reset()         { *m = QueryAllAclAuthorityRequest{} }
func (m *QueryAllAclAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAclAuthorityRequest) ProtoMessage()    {}
func (*QueryAllAclAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{4}
}
func (m *QueryAllAclAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAclAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAclAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAclAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAclAuthorityRequest.Merge(m, src)
}
func (m *QueryAllAclAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAclAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAclAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAclAuthorityRequest proto.InternalMessageInfo

func (m *QueryAllAclAuthorityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllAclAuthorityResponse defines the QueryAllAclAuthorityResponse message.
type QueryAllAclAuthorityResponse struct {
	AclAuthority []AclAuthority      `protobuf:"bytes,1,rep,name=acl_authority,json=aclAuthority,proto3" json:"acl_authority"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAclAuthorityResponse) Reset()         { *m = QueryAllAclAuthorityResponse{} }
func (m *QueryAllAclAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAclAuthorityResponse) ProtoMessage()    {}
func (*QueryAllAclAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{5}
}
func (m *QueryAllAclAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAclAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAclAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAclAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAclAuthorityResponse.Merge(m, src)
}
func (m *QueryAllAclAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAclAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAclAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAclAuthorityResponse proto.InternalMessageInfo

func (m *QueryAllAclAuthorityResponse) GetAclAuthority() []AclAuthority {
	if m != nil {
		return m.AclAuthority
	}
	return nil
}

func (m *QueryAllAclAuthorityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAclAdminRequest defines the QueryGetAclAdminRequest message.
type QueryGetAclAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAclAdminRequest) Reset()         { *m = QueryGetAclAdminRequest{} }
func (m *QueryGetAclAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAclAdminRequest) ProtoMessage()    {}
func (*QueryGetAclAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{6}
}
func (m *QueryGetAclAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAclAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAclAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAclAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAclAdminRequest.Merge(m, src)
}
func (m *QueryGetAclAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAclAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAclAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAclAdminRequest proto.InternalMessageInfo

func (m *QueryGetAclAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetAclAdminResponse defines the QueryGetAclAdminResponse message.
type QueryGetAclAdminResponse struct {
	AclAdmin AclAdmin `protobuf:"bytes,1,opt,name=acl_admin,json=aclAdmin,proto3" json:"acl_admin"`
}

func (m *QueryGetAclAdminResponse) Reset()         { *m = QueryGetAclAdminResponse{} }
func (m *QueryGetAclAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAclAdminResponse) ProtoMessage()    {}
func (*QueryGetAclAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{7}
}
func (m *QueryGetAclAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAclAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAclAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAclAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAclAdminResponse.Merge(m, src)
}
func (m *QueryGetAclAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAclAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAclAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAclAdminResponse proto.InternalMessageInfo

func (m *QueryGetAclAdminResponse) GetAclAdmin() AclAdmin {
	if m != nil {
		return m.AclAdmin
	}
	return AclAdmin{}
}

// QueryAllAclAdminRequest defines the QueryAllAclAdminRequest message.
type QueryAllAclAdminRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAclAdminRequest) Reset()         { *m = QueryAllAclAdminRequest{} }
func (m *QueryAllAclAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAclAdminRequest) ProtoMessage()    {}
func (*QueryAllAclAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{8}
}
func (m *QueryAllAclAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAclAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAclAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAclAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAclAdminRequest.Merge(m, src)
}
func (m *QueryAllAclAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAclAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAclAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAclAdminRequest proto.InternalMessageInfo

func (m *QueryAllAclAdminRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllAclAdminResponse defines the QueryAllAclAdminResponse message.
type QueryAllAclAdminResponse struct {
	AclAdmin   []AclAdmin          `protobuf:"bytes,1,rep,name=acl_admin,json=aclAdmin,proto3" json:"acl_admin"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAclAdminResponse) Reset()         { *m = QueryAllAclAdminResponse{} }
func (m *QueryAllAclAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAclAdminResponse) ProtoMessage()    {}
func (*QueryAllAclAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{9}
}
func (m *QueryAllAclAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAclAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAclAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAclAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAclAdminResponse.Merge(m, src)
}
func (m *QueryAllAclAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAclAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAclAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAclAdminResponse proto.InternalMessageInfo

func (m *QueryAllAclAdminResponse) GetAclAdmin() []AclAdmin {
	if m != nil {
		return m.AclAdmin
	}
	return nil
}

func (m *QueryAllAclAdminResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetSuperAdminRequest defines the QueryGetSuperAdminRequest message.
type QueryGetSuperAdminRequest struct {
}

func (m *QueryGetSuperAdminRequest) Reset()         { *m = QueryGetSuperAdminRequest{} }
func (m *QueryGetSuperAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperAdminRequest) ProtoMessage()    {}
func (*QueryGetSuperAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{10}
}
func (m *QueryGetSuperAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperAdminRequest.Merge(m, src)
}
func (m *QueryGetSuperAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperAdminRequest proto.InternalMessageInfo

// QueryGetSuperAdminResponse defines the QueryGetSuperAdminResponse message.
type QueryGetSuperAdminResponse struct {
	SuperAdmin SuperAdmin `protobuf:"bytes,1,opt,name=super_admin,json=superAdmin,proto3" json:"super_admin"`
}

func (m *QueryGetSuperAdminResponse) Reset()         { *m = QueryGetSuperAdminResponse{} }
func (m *QueryGetSuperAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperAdminResponse) ProtoMessage()    {}
func (*QueryGetSuperAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4a546b5f5ba366, []int{11}
}
func (m *QueryGetSuperAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperAdminResponse.Merge(m, src)
}
func (m *QueryGetSuperAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperAdminResponse proto.InternalMessageInfo

func (m *QueryGetSuperAdminResponse) GetSuperAdmin() SuperAdmin {
	if m != nil {
		return m.SuperAdmin
	}
	return SuperAdmin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ramichain.acl.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ramichain.acl.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetAclAuthorityRequest)(nil), "ramichain.acl.v1.QueryGetAclAuthorityRequest")
	proto.RegisterType((*QueryGetAclAuthorityResponse)(nil), "ramichain.acl.v1.QueryGetAclAuthorityResponse")
	proto.RegisterType((*QueryAllAclAuthorityRequest)(nil), "ramichain.acl.v1.QueryAllAclAuthorityRequest")
	proto.RegisterType((*QueryAllAclAuthorityResponse)(nil), "ramichain.acl.v1.QueryAllAclAuthorityResponse")
	proto.RegisterType((*QueryGetAclAdminRequest)(nil), "ramichain.acl.v1.QueryGetAclAdminRequest")
	proto.RegisterType((*QueryGetAclAdminResponse)(nil), "ramichain.acl.v1.QueryGetAclAdminResponse")
	proto.RegisterType((*QueryAllAclAdminRequest)(nil), "ramichain.acl.v1.QueryAllAclAdminRequest")
	proto.RegisterType((*QueryAllAclAdminResponse)(nil), "ramichain.acl.v1.QueryAllAclAdminResponse")
	proto.RegisterType((*QueryGetSuperAdminRequest)(nil), "ramichain.acl.v1.QueryGetSuperAdminRequest")
	proto.RegisterType((*QueryGetSuperAdminResponse)(nil), "ramichain.acl.v1.QueryGetSuperAdminResponse")
}

func init() { proto.RegisterFile("ramichain/acl/v1/query.proto", fileDescriptor_4f4a546b5f5ba366) }

var fileDescriptor_4f4a546b5f5ba366 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0x77, 0xe0, 0xf7, 0x03, 0x19, 0x20, 0xe2, 0x48, 0xe2, 0x5a, 0xd6, 0x15, 0x2b, 0x22,
	0xac, 0xd8, 0x61, 0xc1, 0x68, 0xa2, 0xf1, 0x00, 0x44, 0x37, 0x26, 0x1c, 0x70, 0x3d, 0xc9, 0xc5,
	0xcc, 0x96, 0x49, 0x69, 0xd2, 0xed, 0x94, 0x4e, 0x97, 0x48, 0x8c, 0x89, 0xf1, 0x15, 0x98, 0x70,
	0x33, 0x9e, 0xf4, 0xe2, 0xc1, 0x83, 0xfa, 0x2a, 0x38, 0x92, 0x78, 0xf1, 0x64, 0x0c, 0x98, 0xf8,
	0x36, 0x4c, 0xa7, 0xcf, 0x42, 0x4b, 0xdb, 0xdd, 0xd5, 0x70, 0x21, 0xdb, 0x99, 0xe7, 0xcf, 0xe7,
	0xfb, 0xcc, 0xf3, 0x3c, 0x01, 0x97, 0x7c, 0xd6, 0xb4, 0xcd, 0x4d, 0x66, 0xbb, 0x94, 0x99, 0x0e,
	0xdd, 0xae, 0xd2, 0xad, 0x16, 0xf7, 0x77, 0x0c, 0xcf, 0x17, 0x81, 0x20, 0x63, 0x47, 0xb7, 0x06,
	0x33, 0x1d, 0x63, 0xbb, 0xaa, 0x9d, 0x63, 0x4d, 0xdb, 0x15, 0x54, 0xfd, 0x8d, 0x8c, 0xb4, 0x8a,
	0x29, 0x64, 0x53, 0x48, 0xda, 0x60, 0x92, 0x47, 0xde, 0x74, 0xbb, 0xda, 0xe0, 0x01, 0xab, 0x52,
	0x8f, 0x59, 0xb6, 0xcb, 0x02, 0x5b, 0xb8, 0x60, 0x3b, 0x6e, 0x09, 0x4b, 0xa8, 0x9f, 0x34, 0xfc,
	0x05, 0xa7, 0x25, 0x4b, 0x08, 0xcb, 0xe1, 0x94, 0x79, 0x36, 0x65, 0xae, 0x2b, 0x02, 0xe5, 0x22,
	0xe1, 0x76, 0x32, 0x85, 0xc8, 0x4c, 0xe7, 0x19, 0xdb, 0x68, 0xda, 0xed, 0xa8, 0x53, 0xd9, 0x16,
	0xad, 0x60, 0x53, 0xf8, 0x76, 0x00, 0x62, 0xb4, 0x4b, 0x29, 0x2b, 0x8f, 0xf9, 0xac, 0xd9, 0x4e,
	0xa3, 0xa7, 0xae, 0x65, 0xcb, 0xe3, 0x7e, 0x3c, 0x91, 0x3e, 0x8e, 0xc9, 0xe3, 0x50, 0xe0, 0x9a,
	0x72, 0xac, 0xf3, 0xad, 0x16, 0x97, 0x81, 0x5e, 0xc7, 0xe7, 0x13, 0xa7, 0xd2, 0x13, 0xae, 0xe4,
	0xe4, 0x1e, 0x1e, 0x88, 0x12, 0x14, 0xd1, 0x24, 0x9a, 0x19, 0x5e, 0x28, 0x1a, 0x27, 0xab, 0x69,
	0x44, 0x1e, 0xcb, 0x43, 0x7b, 0x3f, 0x2e, 0x17, 0x3e, 0xfe, 0xfe, 0x5c, 0x41, 0x75, 0x70, 0xd1,
	0xef, 0xe0, 0x09, 0x15, 0xb3, 0xc6, 0x83, 0x25, 0xd3, 0x59, 0x6a, 0x4b, 0x81, 0x94, 0xa4, 0x88,
	0x07, 0xd9, 0xc6, 0x86, 0xcf, 0x65, 0x14, 0x7c, 0xa8, 0xde, 0xfe, 0xd4, 0x6d, 0x5c, 0xca, 0x76,
	0x04, 0xaa, 0x47, 0x78, 0x34, 0x51, 0x1c, 0x80, 0x2b, 0xa7, 0xe1, 0xe2, 0xee, 0xcb, 0xff, 0x85,
	0x88, 0xf5, 0x11, 0x16, 0x3b, 0xd3, 0x39, 0x30, 0x2e, 0x39, 0x4e, 0x16, 0xe3, 0x43, 0x8c, 0x8f,
	0xdf, 0x1f, 0xd2, 0x4c, 0x1b, 0x51, 0xb3, 0x18, 0x61, 0xb3, 0x18, 0x51, 0xab, 0x41, 0xb3, 0x18,
	0x6b, 0xcc, 0xe2, 0xe0, 0x5b, 0x8f, 0x79, 0xea, 0x5f, 0x11, 0x48, 0x4a, 0xe5, 0xc9, 0x97, 0xd4,
	0xff, 0x6f, 0x92, 0x48, 0x2d, 0xc1, 0xdc, 0xa7, 0x98, 0xaf, 0x77, 0x65, 0x8e, 0x38, 0x12, 0xd0,
	0x8b, 0xf8, 0x42, 0xfc, 0x19, 0xc2, 0x1e, 0xea, 0xfe, 0x76, 0x4f, 0x71, 0x31, 0xed, 0x04, 0x22,
	0xef, 0xe3, 0xa1, 0xa3, 0xb6, 0x87, 0x62, 0x6a, 0xd9, 0x02, 0x43, 0x0b, 0x10, 0x77, 0x86, 0xc1,
	0xb7, 0xce, 0x80, 0x07, 0x6a, 0x18, 0xe7, 0x39, 0xad, 0x77, 0x7a, 0x8f, 0x00, 0x3f, 0x91, 0x23,
	0x1b, 0xbf, 0xff, 0xef, 0xf0, 0x4f, 0xef, 0x5d, 0x26, 0xf0, 0xc5, 0x76, 0x89, 0x9f, 0x84, 0xe3,
	0x1d, 0xaf, 0x84, 0xce, 0xb0, 0x96, 0x75, 0x09, 0x12, 0x56, 0xf0, 0x70, 0x6c, 0x23, 0x40, 0xa1,
	0x4a, 0x69, 0x11, 0xc7, 0xae, 0x20, 0x03, 0xcb, 0xa3, 0x93, 0x85, 0x2f, 0x83, 0xf8, 0x7f, 0x95,
	0x83, 0xbc, 0x42, 0x78, 0x20, 0x9a, 0x7f, 0x32, 0x95, 0x0e, 0x92, 0x5e, 0x33, 0xda, 0xb5, 0x2e,
	0x56, 0x11, 0xa6, 0x3e, 0xfb, 0xfa, 0xdb, 0xaf, 0xdd, 0xbe, 0xab, 0xe4, 0x0a, 0xad, 0xd5, 0x1e,
	0xac, 0xaf, 0xb2, 0x86, 0xa4, 0x39, 0x8b, 0x8f, 0x7c, 0x42, 0xf8, 0xec, 0x89, 0x3d, 0x41, 0x6e,
	0xe6, 0x64, 0xc9, 0x5e, 0x44, 0x9a, 0xd1, 0xab, 0x39, 0xd0, 0xdd, 0x55, 0x74, 0xb7, 0xc8, 0x42,
	0x07, 0xba, 0xc4, 0x30, 0xd3, 0x17, 0x30, 0x1d, 0x2f, 0xc9, 0x07, 0x84, 0xc7, 0x56, 0x6d, 0xd9,
	0x1b, 0x6f, 0xf6, 0x52, 0xca, 0xe5, 0xcd, 0xd9, 0x2d, 0xfa, 0xbc, 0xe2, 0xad, 0x90, 0x99, 0x5e,
	0x79, 0xc9, 0x3b, 0x84, 0x87, 0x63, 0x03, 0x4c, 0x66, 0x3b, 0x57, 0x28, 0xd6, 0x7f, 0x5a, 0xa5,
	0x17, 0x53, 0x00, 0xbb, 0xad, 0xc0, 0xe6, 0x89, 0xd1, 0x0d, 0x2c, 0xf4, 0x8a, 0x15, 0x71, 0x17,
	0xe1, 0x91, 0x76, 0x11, 0x3b, 0xf2, 0xa5, 0x37, 0x45, 0x2e, 0x5f, 0xc6, 0xc0, 0xeb, 0x73, 0x8a,
	0x6f, 0x9a, 0x4c, 0xf5, 0xc2, 0x47, 0xde, 0x22, 0x3c, 0x9a, 0x98, 0x3a, 0x72, 0x23, 0xbf, 0x16,
	0xa9, 0xc1, 0xd5, 0xe6, 0x7a, 0x33, 0x06, 0x34, 0x43, 0xa1, 0xcd, 0x90, 0xe9, 0x0e, 0x68, 0xb1,
	0x49, 0x5f, 0x5e, 0xd9, 0x3b, 0x28, 0xa3, 0xfd, 0x83, 0x32, 0xfa, 0x79, 0x50, 0x46, 0x6f, 0x0e,
	0xcb, 0x85, 0xfd, 0xc3, 0x72, 0xe1, 0xfb, 0x61, 0xb9, 0xb0, 0x3e, 0x6b, 0xd9, 0xc1, 0x66, 0xab,
	0x61, 0x98, 0xa2, 0x99, 0x15, 0xeb, 0xb9, 0x8a, 0x16, 0xec, 0x78, 0x5c, 0x36, 0x06, 0xd4, 0x7f,
	0x10, 0x8b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xa9, 0xaa, 0x5b, 0x71, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListAclAuthority Queries a list of AclAuthority items.
	GetAclAuthority(ctx context.Context, in *QueryGetAclAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAclAuthorityResponse, error)
	// ListAclAuthority defines the ListAclAuthority RPC.
	ListAclAuthority(ctx context.Context, in *QueryAllAclAuthorityRequest, opts ...grpc.CallOption) (*QueryAllAclAuthorityResponse, error)
	// ListAclAdmin Queries a list of AclAdmin items.
	GetAclAdmin(ctx context.Context, in *QueryGetAclAdminRequest, opts ...grpc.CallOption) (*QueryGetAclAdminResponse, error)
	// ListAclAdmin defines the ListAclAdmin RPC.
	ListAclAdmin(ctx context.Context, in *QueryAllAclAdminRequest, opts ...grpc.CallOption) (*QueryAllAclAdminResponse, error)
	// Queries a SuperAdmin by index.
	GetSuperAdmin(ctx context.Context, in *QueryGetSuperAdminRequest, opts ...grpc.CallOption) (*QueryGetSuperAdminResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAclAuthority(ctx context.Context, in *QueryGetAclAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAclAuthorityResponse, error) {
	out := new(QueryGetAclAuthorityResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/GetAclAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAclAuthority(ctx context.Context, in *QueryAllAclAuthorityRequest, opts ...grpc.CallOption) (*QueryAllAclAuthorityResponse, error) {
	out := new(QueryAllAclAuthorityResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/ListAclAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAclAdmin(ctx context.Context, in *QueryGetAclAdminRequest, opts ...grpc.CallOption) (*QueryGetAclAdminResponse, error) {
	out := new(QueryGetAclAdminResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/GetAclAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAclAdmin(ctx context.Context, in *QueryAllAclAdminRequest, opts ...grpc.CallOption) (*QueryAllAclAdminResponse, error) {
	out := new(QueryAllAclAdminResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/ListAclAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSuperAdmin(ctx context.Context, in *QueryGetSuperAdminRequest, opts ...grpc.CallOption) (*QueryGetSuperAdminResponse, error) {
	out := new(QueryGetSuperAdminResponse)
	err := c.cc.Invoke(ctx, "/ramichain.acl.v1.Query/GetSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListAclAuthority Queries a list of AclAuthority items.
	GetAclAuthority(context.Context, *QueryGetAclAuthorityRequest) (*QueryGetAclAuthorityResponse, error)
	// ListAclAuthority defines the ListAclAuthority RPC.
	ListAclAuthority(context.Context, *QueryAllAclAuthorityRequest) (*QueryAllAclAuthorityResponse, error)
	// ListAclAdmin Queries a list of AclAdmin items.
	GetAclAdmin(context.Context, *QueryGetAclAdminRequest) (*QueryGetAclAdminResponse, error)
	// ListAclAdmin defines the ListAclAdmin RPC.
	ListAclAdmin(context.Context, *QueryAllAclAdminRequest) (*QueryAllAclAdminResponse, error)
	// Queries a SuperAdmin by index.
	GetSuperAdmin(context.Context, *QueryGetSuperAdminRequest) (*QueryGetSuperAdminResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetAclAuthority(ctx context.Context, req *QueryGetAclAuthorityRequest) (*QueryGetAclAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclAuthority not implemented")
}
func (*UnimplementedQueryServer) ListAclAuthority(ctx context.Context, req *QueryAllAclAuthorityRequest) (*QueryAllAclAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAclAuthority not implemented")
}
func (*UnimplementedQueryServer) GetAclAdmin(ctx context.Context, req *QueryGetAclAdminRequest) (*QueryGetAclAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclAdmin not implemented")
}
func (*UnimplementedQueryServer) ListAclAdmin(ctx context.Context, req *QueryAllAclAdminRequest) (*QueryAllAclAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAclAdmin not implemented")
}
func (*UnimplementedQueryServer) GetSuperAdmin(ctx context.Context, req *QueryGetSuperAdminRequest) (*QueryGetSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperAdmin not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAclAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAclAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAclAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/GetAclAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAclAuthority(ctx, req.(*QueryGetAclAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAclAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAclAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAclAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/ListAclAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAclAuthority(ctx, req.(*QueryAllAclAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAclAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAclAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAclAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/GetAclAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAclAdmin(ctx, req.(*QueryGetAclAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAclAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAclAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAclAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/ListAclAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAclAdmin(ctx, req.(*QueryAllAclAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ramichain.acl.v1.Query/GetSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSuperAdmin(ctx, req.(*QueryGetSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ramichain.acl.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetAclAuthority",
			Handler:    _Query_GetAclAuthority_Handler,
		},
		{
			MethodName: "ListAclAuthority",
			Handler:    _Query_ListAclAuthority_Handler,
		},
		{
			MethodName: "GetAclAdmin",
			Handler:    _Query_GetAclAdmin_Handler,
		},
		{
			MethodName: "ListAclAdmin",
			Handler:    _Query_ListAclAdmin_Handler,
		},
		{
			MethodName: "GetSuperAdmin",
			Handler:    _Query_GetSuperAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ramichain/acl/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAclAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAclAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAclAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAclAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAclAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAclAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AclAuthority.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAclAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAclAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAclAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAclAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAclAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAclAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AclAuthority) > 0 {
		for iNdEx := len(m.AclAuthority) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AclAuthority[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAclAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAclAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAclAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAclAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAclAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAclAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AclAdmin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAclAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAclAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAclAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAclAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAclAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAclAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AclAdmin) > 0 {
		for iNdEx := len(m.AclAdmin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AclAdmin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SuperAdmin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAclAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAclAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AclAuthority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAclAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAclAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AclAuthority) > 0 {
		for _, e := range m.AclAuthority {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAclAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAclAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AclAdmin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAclAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAclAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AclAdmin) > 0 {
		for _, e := range m.AclAdmin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuperAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSuperAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SuperAdmin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAclAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAclAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAclAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAclAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAclAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAclAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AclAuthority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAclAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAclAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAclAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAclAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAclAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAclAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AclAuthority = append(m.AclAuthority, AclAuthority{})
			if err := m.AclAuthority[len(m.AclAuthority)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAclAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAclAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAclAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAclAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAclAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAclAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AclAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAclAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAclAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAclAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAclAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAclAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAclAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AclAdmin = append(m.AclAdmin, AclAdmin{})
			if err := m.AclAdmin[len(m.AclAdmin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuperAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
