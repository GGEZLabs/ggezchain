// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ggezchain/acl/access_definition.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccessDefinition struct {
	Module    string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	IsMaker   bool   `protobuf:"varint,2,opt,name=is_maker,json=isMaker,proto3" json:"is_maker,omitempty"`
	IsChecker bool   `protobuf:"varint,3,opt,name=is_checker,json=isChecker,proto3" json:"is_checker,omitempty"`
}

func (m *AccessDefinition) Reset()         { *m = AccessDefinition{} }
func (m *AccessDefinition) String() string { return proto.CompactTextString(m) }
func (*AccessDefinition) ProtoMessage()    {}
func (*AccessDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d079af0e8dd7a, []int{0}
}
func (m *AccessDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessDefinition.Merge(m, src)
}
func (m *AccessDefinition) XXX_Size() int {
	return m.Size()
}
func (m *AccessDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_AccessDefinition proto.InternalMessageInfo

func (m *AccessDefinition) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *AccessDefinition) GetIsMaker() bool {
	if m != nil {
		return m.IsMaker
	}
	return false
}

func (m *AccessDefinition) GetIsChecker() bool {
	if m != nil {
		return m.IsChecker
	}
	return false
}

func init() {
	proto.RegisterType((*AccessDefinition)(nil), "ggezchain.acl.AccessDefinition")
}

func init() {
	proto.RegisterFile("ggezchain/acl/access_definition.proto", fileDescriptor_217d079af0e8dd7a)
}

var fileDescriptor_217d079af0e8dd7a = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x4f, 0x4f, 0xad,
	0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x4c, 0xce, 0xd1, 0x4f, 0x4c, 0x4e, 0x4e, 0x2d, 0x2e,
	0x8e, 0x4f, 0x49, 0x4d, 0xcb, 0xcc, 0xcb, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x85, 0x2b, 0xd3, 0x4b, 0x4c, 0xce, 0x51, 0x4a, 0xe1, 0x12, 0x70, 0x04, 0xab,
	0x74, 0x81, 0x2b, 0x14, 0x12, 0xe3, 0x62, 0xcb, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x24, 0xb9, 0x38, 0x32, 0x8b, 0xe3, 0x73, 0x13, 0xb3,
	0x53, 0x8b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0xd8, 0x33, 0x8b, 0x7d, 0x41, 0x5c, 0x21,
	0x59, 0x2e, 0xae, 0xcc, 0xe2, 0xf8, 0xe4, 0x8c, 0xd4, 0x64, 0x90, 0x24, 0x33, 0x58, 0x92, 0x33,
	0xb3, 0xd8, 0x19, 0x22, 0xe0, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xee, 0xee, 0xae,
	0x51, 0x3e, 0x89, 0x49, 0xc5, 0xfa, 0x08, 0x9f, 0x54, 0x80, 0xfd, 0x52, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0xf6, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x06, 0x81, 0x8a, 0xb7, 0xe9,
	0x00, 0x00, 0x00,
}

func (m *AccessDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsChecker {
		i--
		if m.IsChecker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsMaker {
		i--
		if m.IsMaker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintAccessDefinition(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccessDefinition(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccessDefinition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccessDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovAccessDefinition(uint64(l))
	}
	if m.IsMaker {
		n += 2
	}
	if m.IsChecker {
		n += 2
	}
	return n
}

func sovAccessDefinition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccessDefinition(x uint64) (n int) {
	return sovAccessDefinition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccessDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccessDefinition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccessDefinition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccessDefinition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMaker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMaker = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChecker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccessDefinition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChecker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAccessDefinition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccessDefinition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccessDefinition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccessDefinition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccessDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccessDefinition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccessDefinition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccessDefinition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccessDefinition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccessDefinition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccessDefinition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccessDefinition = fmt.Errorf("proto: unexpected end of group")
)
