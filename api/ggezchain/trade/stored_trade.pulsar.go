// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package trade

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_StoredTrade                         protoreflect.MessageDescriptor
	fd_StoredTrade_trade_index             protoreflect.FieldDescriptor
	fd_StoredTrade_trade_type              protoreflect.FieldDescriptor
	fd_StoredTrade_amount                  protoreflect.FieldDescriptor
	fd_StoredTrade_price                   protoreflect.FieldDescriptor
	fd_StoredTrade_receiver_address        protoreflect.FieldDescriptor
	fd_StoredTrade_status                  protoreflect.FieldDescriptor
	fd_StoredTrade_maker                   protoreflect.FieldDescriptor
	fd_StoredTrade_checker                 protoreflect.FieldDescriptor
	fd_StoredTrade_create_date             protoreflect.FieldDescriptor
	fd_StoredTrade_update_date             protoreflect.FieldDescriptor
	fd_StoredTrade_process_date            protoreflect.FieldDescriptor
	fd_StoredTrade_trade_data              protoreflect.FieldDescriptor
	fd_StoredTrade_coin_minting_price_json protoreflect.FieldDescriptor
	fd_StoredTrade_exchange_rate_json      protoreflect.FieldDescriptor
	fd_StoredTrade_banking_system_data     protoreflect.FieldDescriptor
	fd_StoredTrade_result                  protoreflect.FieldDescriptor
)

func init() {
	file_ggezchain_trade_stored_trade_proto_init()
	md_StoredTrade = File_ggezchain_trade_stored_trade_proto.Messages().ByName("StoredTrade")
	fd_StoredTrade_trade_index = md_StoredTrade.Fields().ByName("trade_index")
	fd_StoredTrade_trade_type = md_StoredTrade.Fields().ByName("trade_type")
	fd_StoredTrade_amount = md_StoredTrade.Fields().ByName("amount")
	fd_StoredTrade_price = md_StoredTrade.Fields().ByName("price")
	fd_StoredTrade_receiver_address = md_StoredTrade.Fields().ByName("receiver_address")
	fd_StoredTrade_status = md_StoredTrade.Fields().ByName("status")
	fd_StoredTrade_maker = md_StoredTrade.Fields().ByName("maker")
	fd_StoredTrade_checker = md_StoredTrade.Fields().ByName("checker")
	fd_StoredTrade_create_date = md_StoredTrade.Fields().ByName("create_date")
	fd_StoredTrade_update_date = md_StoredTrade.Fields().ByName("update_date")
	fd_StoredTrade_process_date = md_StoredTrade.Fields().ByName("process_date")
	fd_StoredTrade_trade_data = md_StoredTrade.Fields().ByName("trade_data")
	fd_StoredTrade_coin_minting_price_json = md_StoredTrade.Fields().ByName("coin_minting_price_json")
	fd_StoredTrade_exchange_rate_json = md_StoredTrade.Fields().ByName("exchange_rate_json")
	fd_StoredTrade_banking_system_data = md_StoredTrade.Fields().ByName("banking_system_data")
	fd_StoredTrade_result = md_StoredTrade.Fields().ByName("result")
}

var _ protoreflect.Message = (*fastReflection_StoredTrade)(nil)

type fastReflection_StoredTrade StoredTrade

func (x *StoredTrade) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StoredTrade)(x)
}

func (x *StoredTrade) slowProtoReflect() protoreflect.Message {
	mi := &file_ggezchain_trade_stored_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StoredTrade_messageType fastReflection_StoredTrade_messageType
var _ protoreflect.MessageType = fastReflection_StoredTrade_messageType{}

type fastReflection_StoredTrade_messageType struct{}

func (x fastReflection_StoredTrade_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StoredTrade)(nil)
}
func (x fastReflection_StoredTrade_messageType) New() protoreflect.Message {
	return new(fastReflection_StoredTrade)
}
func (x fastReflection_StoredTrade_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StoredTrade
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StoredTrade) Descriptor() protoreflect.MessageDescriptor {
	return md_StoredTrade
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StoredTrade) Type() protoreflect.MessageType {
	return _fastReflection_StoredTrade_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StoredTrade) New() protoreflect.Message {
	return new(fastReflection_StoredTrade)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StoredTrade) Interface() protoreflect.ProtoMessage {
	return (*StoredTrade)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StoredTrade) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TradeIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TradeIndex)
		if !f(fd_StoredTrade_trade_index, value) {
			return
		}
	}
	if x.TradeType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.TradeType))
		if !f(fd_StoredTrade_trade_type, value) {
			return
		}
	}
	if x.Amount != nil {
		value := protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
		if !f(fd_StoredTrade_amount, value) {
			return
		}
	}
	if x.Price != "" {
		value := protoreflect.ValueOfString(x.Price)
		if !f(fd_StoredTrade_price, value) {
			return
		}
	}
	if x.ReceiverAddress != "" {
		value := protoreflect.ValueOfString(x.ReceiverAddress)
		if !f(fd_StoredTrade_receiver_address, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_StoredTrade_status, value) {
			return
		}
	}
	if x.Maker != "" {
		value := protoreflect.ValueOfString(x.Maker)
		if !f(fd_StoredTrade_maker, value) {
			return
		}
	}
	if x.Checker != "" {
		value := protoreflect.ValueOfString(x.Checker)
		if !f(fd_StoredTrade_checker, value) {
			return
		}
	}
	if x.CreateDate != "" {
		value := protoreflect.ValueOfString(x.CreateDate)
		if !f(fd_StoredTrade_create_date, value) {
			return
		}
	}
	if x.UpdateDate != "" {
		value := protoreflect.ValueOfString(x.UpdateDate)
		if !f(fd_StoredTrade_update_date, value) {
			return
		}
	}
	if x.ProcessDate != "" {
		value := protoreflect.ValueOfString(x.ProcessDate)
		if !f(fd_StoredTrade_process_date, value) {
			return
		}
	}
	if x.TradeData != "" {
		value := protoreflect.ValueOfString(x.TradeData)
		if !f(fd_StoredTrade_trade_data, value) {
			return
		}
	}
	if x.CoinMintingPriceJson != "" {
		value := protoreflect.ValueOfString(x.CoinMintingPriceJson)
		if !f(fd_StoredTrade_coin_minting_price_json, value) {
			return
		}
	}
	if x.ExchangeRateJson != "" {
		value := protoreflect.ValueOfString(x.ExchangeRateJson)
		if !f(fd_StoredTrade_exchange_rate_json, value) {
			return
		}
	}
	if x.BankingSystemData != "" {
		value := protoreflect.ValueOfString(x.BankingSystemData)
		if !f(fd_StoredTrade_banking_system_data, value) {
			return
		}
	}
	if x.Result != "" {
		value := protoreflect.ValueOfString(x.Result)
		if !f(fd_StoredTrade_result, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StoredTrade) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ggezchain.trade.StoredTrade.trade_index":
		return x.TradeIndex != uint64(0)
	case "ggezchain.trade.StoredTrade.trade_type":
		return x.TradeType != 0
	case "ggezchain.trade.StoredTrade.amount":
		return x.Amount != nil
	case "ggezchain.trade.StoredTrade.price":
		return x.Price != ""
	case "ggezchain.trade.StoredTrade.receiver_address":
		return x.ReceiverAddress != ""
	case "ggezchain.trade.StoredTrade.status":
		return x.Status != 0
	case "ggezchain.trade.StoredTrade.maker":
		return x.Maker != ""
	case "ggezchain.trade.StoredTrade.checker":
		return x.Checker != ""
	case "ggezchain.trade.StoredTrade.create_date":
		return x.CreateDate != ""
	case "ggezchain.trade.StoredTrade.update_date":
		return x.UpdateDate != ""
	case "ggezchain.trade.StoredTrade.process_date":
		return x.ProcessDate != ""
	case "ggezchain.trade.StoredTrade.trade_data":
		return x.TradeData != ""
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		return x.CoinMintingPriceJson != ""
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		return x.ExchangeRateJson != ""
	case "ggezchain.trade.StoredTrade.banking_system_data":
		return x.BankingSystemData != ""
	case "ggezchain.trade.StoredTrade.result":
		return x.Result != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StoredTrade) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ggezchain.trade.StoredTrade.trade_index":
		x.TradeIndex = uint64(0)
	case "ggezchain.trade.StoredTrade.trade_type":
		x.TradeType = 0
	case "ggezchain.trade.StoredTrade.amount":
		x.Amount = nil
	case "ggezchain.trade.StoredTrade.price":
		x.Price = ""
	case "ggezchain.trade.StoredTrade.receiver_address":
		x.ReceiverAddress = ""
	case "ggezchain.trade.StoredTrade.status":
		x.Status = 0
	case "ggezchain.trade.StoredTrade.maker":
		x.Maker = ""
	case "ggezchain.trade.StoredTrade.checker":
		x.Checker = ""
	case "ggezchain.trade.StoredTrade.create_date":
		x.CreateDate = ""
	case "ggezchain.trade.StoredTrade.update_date":
		x.UpdateDate = ""
	case "ggezchain.trade.StoredTrade.process_date":
		x.ProcessDate = ""
	case "ggezchain.trade.StoredTrade.trade_data":
		x.TradeData = ""
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		x.CoinMintingPriceJson = ""
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		x.ExchangeRateJson = ""
	case "ggezchain.trade.StoredTrade.banking_system_data":
		x.BankingSystemData = ""
	case "ggezchain.trade.StoredTrade.result":
		x.Result = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StoredTrade) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ggezchain.trade.StoredTrade.trade_index":
		value := x.TradeIndex
		return protoreflect.ValueOfUint64(value)
	case "ggezchain.trade.StoredTrade.trade_type":
		value := x.TradeType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "ggezchain.trade.StoredTrade.amount":
		value := x.Amount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ggezchain.trade.StoredTrade.price":
		value := x.Price
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.receiver_address":
		value := x.ReceiverAddress
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "ggezchain.trade.StoredTrade.maker":
		value := x.Maker
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.checker":
		value := x.Checker
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.create_date":
		value := x.CreateDate
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.update_date":
		value := x.UpdateDate
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.process_date":
		value := x.ProcessDate
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.trade_data":
		value := x.TradeData
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		value := x.CoinMintingPriceJson
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		value := x.ExchangeRateJson
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.banking_system_data":
		value := x.BankingSystemData
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.StoredTrade.result":
		value := x.Result
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StoredTrade) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ggezchain.trade.StoredTrade.trade_index":
		x.TradeIndex = value.Uint()
	case "ggezchain.trade.StoredTrade.trade_type":
		x.TradeType = (TradeType)(value.Enum())
	case "ggezchain.trade.StoredTrade.amount":
		x.Amount = value.Message().Interface().(*v1beta1.Coin)
	case "ggezchain.trade.StoredTrade.price":
		x.Price = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.receiver_address":
		x.ReceiverAddress = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.status":
		x.Status = (TradeStatus)(value.Enum())
	case "ggezchain.trade.StoredTrade.maker":
		x.Maker = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.checker":
		x.Checker = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.create_date":
		x.CreateDate = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.update_date":
		x.UpdateDate = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.process_date":
		x.ProcessDate = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.trade_data":
		x.TradeData = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		x.CoinMintingPriceJson = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		x.ExchangeRateJson = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.banking_system_data":
		x.BankingSystemData = value.Interface().(string)
	case "ggezchain.trade.StoredTrade.result":
		x.Result = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StoredTrade) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.StoredTrade.amount":
		if x.Amount == nil {
			x.Amount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
	case "ggezchain.trade.StoredTrade.trade_index":
		panic(fmt.Errorf("field trade_index of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.trade_type":
		panic(fmt.Errorf("field trade_type of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.price":
		panic(fmt.Errorf("field price of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.receiver_address":
		panic(fmt.Errorf("field receiver_address of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.status":
		panic(fmt.Errorf("field status of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.maker":
		panic(fmt.Errorf("field maker of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.checker":
		panic(fmt.Errorf("field checker of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.create_date":
		panic(fmt.Errorf("field create_date of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.update_date":
		panic(fmt.Errorf("field update_date of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.process_date":
		panic(fmt.Errorf("field process_date of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.trade_data":
		panic(fmt.Errorf("field trade_data of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		panic(fmt.Errorf("field coin_minting_price_json of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		panic(fmt.Errorf("field exchange_rate_json of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.banking_system_data":
		panic(fmt.Errorf("field banking_system_data of message ggezchain.trade.StoredTrade is not mutable"))
	case "ggezchain.trade.StoredTrade.result":
		panic(fmt.Errorf("field result of message ggezchain.trade.StoredTrade is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StoredTrade) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.StoredTrade.trade_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ggezchain.trade.StoredTrade.trade_type":
		return protoreflect.ValueOfEnum(0)
	case "ggezchain.trade.StoredTrade.amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ggezchain.trade.StoredTrade.price":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.receiver_address":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.status":
		return protoreflect.ValueOfEnum(0)
	case "ggezchain.trade.StoredTrade.maker":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.checker":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.create_date":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.update_date":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.process_date":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.trade_data":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.coin_minting_price_json":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.exchange_rate_json":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.banking_system_data":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.StoredTrade.result":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.StoredTrade"))
		}
		panic(fmt.Errorf("message ggezchain.trade.StoredTrade does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StoredTrade) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ggezchain.trade.StoredTrade", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StoredTrade) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StoredTrade) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StoredTrade) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StoredTrade) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StoredTrade)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TradeIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.TradeIndex))
		}
		if x.TradeType != 0 {
			n += 1 + runtime.Sov(uint64(x.TradeType))
		}
		if x.Amount != nil {
			l = options.Size(x.Amount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Price)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReceiverAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Maker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Checker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CreateDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UpdateDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProcessDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TradeData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CoinMintingPriceJson)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExchangeRateJson)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BankingSystemData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Result)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StoredTrade)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Result) > 0 {
			i -= len(x.Result)
			copy(dAtA[i:], x.Result)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Result)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.BankingSystemData) > 0 {
			i -= len(x.BankingSystemData)
			copy(dAtA[i:], x.BankingSystemData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BankingSystemData)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.ExchangeRateJson) > 0 {
			i -= len(x.ExchangeRateJson)
			copy(dAtA[i:], x.ExchangeRateJson)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExchangeRateJson)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.CoinMintingPriceJson) > 0 {
			i -= len(x.CoinMintingPriceJson)
			copy(dAtA[i:], x.CoinMintingPriceJson)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CoinMintingPriceJson)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.TradeData) > 0 {
			i -= len(x.TradeData)
			copy(dAtA[i:], x.TradeData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TradeData)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.ProcessDate) > 0 {
			i -= len(x.ProcessDate)
			copy(dAtA[i:], x.ProcessDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProcessDate)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.UpdateDate) > 0 {
			i -= len(x.UpdateDate)
			copy(dAtA[i:], x.UpdateDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UpdateDate)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.CreateDate) > 0 {
			i -= len(x.CreateDate)
			copy(dAtA[i:], x.CreateDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreateDate)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Checker) > 0 {
			i -= len(x.Checker)
			copy(dAtA[i:], x.Checker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Checker)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Maker) > 0 {
			i -= len(x.Maker)
			copy(dAtA[i:], x.Maker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Maker)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if len(x.ReceiverAddress) > 0 {
			i -= len(x.ReceiverAddress)
			copy(dAtA[i:], x.ReceiverAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReceiverAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Price) > 0 {
			i -= len(x.Price)
			copy(dAtA[i:], x.Price)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Price)))
			i--
			dAtA[i] = 0x22
		}
		if x.Amount != nil {
			encoded, err := options.Marshal(x.Amount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.TradeType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TradeType))
			i--
			dAtA[i] = 0x10
		}
		if x.TradeIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TradeIndex))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StoredTrade)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StoredTrade: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StoredTrade: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeIndex", wireType)
				}
				x.TradeIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TradeIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeType", wireType)
				}
				x.TradeType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TradeType |= TradeType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Amount == nil {
					x.Amount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Price = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReceiverAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= TradeStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Maker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Checker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Checker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreateDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UpdateDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProcessDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProcessDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeData", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeData = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinMintingPriceJson", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CoinMintingPriceJson = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeRateJson", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeRateJson = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BankingSystemData", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BankingSystemData = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Result = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ggezchain/trade/stored_trade.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StoredTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeIndex           uint64        `protobuf:"varint,1,opt,name=trade_index,json=tradeIndex,proto3" json:"trade_index,omitempty"`
	TradeType            TradeType     `protobuf:"varint,2,opt,name=trade_type,json=tradeType,proto3,enum=ggezchain.trade.TradeType" json:"trade_type,omitempty"`
	Amount               *v1beta1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Price                string        `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	ReceiverAddress      string        `protobuf:"bytes,5,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	Status               TradeStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=ggezchain.trade.TradeStatus" json:"status,omitempty"`
	Maker                string        `protobuf:"bytes,7,opt,name=maker,proto3" json:"maker,omitempty"`
	Checker              string        `protobuf:"bytes,8,opt,name=checker,proto3" json:"checker,omitempty"`
	CreateDate           string        `protobuf:"bytes,9,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate           string        `protobuf:"bytes,10,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	ProcessDate          string        `protobuf:"bytes,11,opt,name=process_date,json=processDate,proto3" json:"process_date,omitempty"`
	TradeData            string        `protobuf:"bytes,12,opt,name=trade_data,json=tradeData,proto3" json:"trade_data,omitempty"`
	CoinMintingPriceJson string        `protobuf:"bytes,13,opt,name=coin_minting_price_json,json=coinMintingPriceJson,proto3" json:"coin_minting_price_json,omitempty"`
	ExchangeRateJson     string        `protobuf:"bytes,14,opt,name=exchange_rate_json,json=exchangeRateJson,proto3" json:"exchange_rate_json,omitempty"`
	BankingSystemData    string        `protobuf:"bytes,15,opt,name=banking_system_data,json=bankingSystemData,proto3" json:"banking_system_data,omitempty"`
	Result               string        `protobuf:"bytes,16,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StoredTrade) Reset() {
	*x = StoredTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ggezchain_trade_stored_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredTrade) ProtoMessage() {}

// Deprecated: Use StoredTrade.ProtoReflect.Descriptor instead.
func (*StoredTrade) Descriptor() ([]byte, []int) {
	return file_ggezchain_trade_stored_trade_proto_rawDescGZIP(), []int{0}
}

func (x *StoredTrade) GetTradeIndex() uint64 {
	if x != nil {
		return x.TradeIndex
	}
	return 0
}

func (x *StoredTrade) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *StoredTrade) GetAmount() *v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *StoredTrade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *StoredTrade) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *StoredTrade) GetStatus() TradeStatus {
	if x != nil {
		return x.Status
	}
	return TradeStatus_TRADE_STATUS_UNSPECIFIED
}

func (x *StoredTrade) GetMaker() string {
	if x != nil {
		return x.Maker
	}
	return ""
}

func (x *StoredTrade) GetChecker() string {
	if x != nil {
		return x.Checker
	}
	return ""
}

func (x *StoredTrade) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *StoredTrade) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *StoredTrade) GetProcessDate() string {
	if x != nil {
		return x.ProcessDate
	}
	return ""
}

func (x *StoredTrade) GetTradeData() string {
	if x != nil {
		return x.TradeData
	}
	return ""
}

func (x *StoredTrade) GetCoinMintingPriceJson() string {
	if x != nil {
		return x.CoinMintingPriceJson
	}
	return ""
}

func (x *StoredTrade) GetExchangeRateJson() string {
	if x != nil {
		return x.ExchangeRateJson
	}
	return ""
}

func (x *StoredTrade) GetBankingSystemData() string {
	if x != nil {
		return x.BankingSystemData
	}
	return ""
}

func (x *StoredTrade) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_ggezchain_trade_stored_trade_proto protoreflect.FileDescriptor

var file_ggezchain_trade_stored_trade_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf4, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0xb7, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x42, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x47, 0x47, 0x45, 0x5a, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x67, 0x65, 0x7a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2, 0x02, 0x03, 0x47, 0x54, 0x58, 0xaa, 0x02,
	0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0xca, 0x02, 0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0xe2, 0x02, 0x1b, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x10, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ggezchain_trade_stored_trade_proto_rawDescOnce sync.Once
	file_ggezchain_trade_stored_trade_proto_rawDescData = file_ggezchain_trade_stored_trade_proto_rawDesc
)

func file_ggezchain_trade_stored_trade_proto_rawDescGZIP() []byte {
	file_ggezchain_trade_stored_trade_proto_rawDescOnce.Do(func() {
		file_ggezchain_trade_stored_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_ggezchain_trade_stored_trade_proto_rawDescData)
	})
	return file_ggezchain_trade_stored_trade_proto_rawDescData
}

var file_ggezchain_trade_stored_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ggezchain_trade_stored_trade_proto_goTypes = []interface{}{
	(*StoredTrade)(nil),  // 0: ggezchain.trade.StoredTrade
	(TradeType)(0),       // 1: ggezchain.trade.TradeType
	(*v1beta1.Coin)(nil), // 2: cosmos.base.v1beta1.Coin
	(TradeStatus)(0),     // 3: ggezchain.trade.TradeStatus
}
var file_ggezchain_trade_stored_trade_proto_depIdxs = []int32{
	1, // 0: ggezchain.trade.StoredTrade.trade_type:type_name -> ggezchain.trade.TradeType
	2, // 1: ggezchain.trade.StoredTrade.amount:type_name -> cosmos.base.v1beta1.Coin
	3, // 2: ggezchain.trade.StoredTrade.status:type_name -> ggezchain.trade.TradeStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ggezchain_trade_stored_trade_proto_init() }
func file_ggezchain_trade_stored_trade_proto_init() {
	if File_ggezchain_trade_stored_trade_proto != nil {
		return
	}
	file_ggezchain_trade_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ggezchain_trade_stored_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ggezchain_trade_stored_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ggezchain_trade_stored_trade_proto_goTypes,
		DependencyIndexes: file_ggezchain_trade_stored_trade_proto_depIdxs,
		MessageInfos:      file_ggezchain_trade_stored_trade_proto_msgTypes,
	}.Build()
	File_ggezchain_trade_stored_trade_proto = out.File
	file_ggezchain_trade_stored_trade_proto_rawDesc = nil
	file_ggezchain_trade_stored_trade_proto_goTypes = nil
	file_ggezchain_trade_stored_trade_proto_depIdxs = nil
}
