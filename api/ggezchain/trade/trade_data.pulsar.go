// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package trade

import (
	binary "encoding/binary"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	math "math"
	reflect "reflect"
	sync "sync"
)

var (
	md_TradeData            protoreflect.MessageDescriptor
	fd_TradeData_trade_info protoreflect.FieldDescriptor
	fd_TradeData_brokerage  protoreflect.FieldDescriptor
)

func init() {
	file_ggezchain_trade_trade_data_proto_init()
	md_TradeData = File_ggezchain_trade_trade_data_proto.Messages().ByName("TradeData")
	fd_TradeData_trade_info = md_TradeData.Fields().ByName("trade_info")
	fd_TradeData_brokerage = md_TradeData.Fields().ByName("brokerage")
}

var _ protoreflect.Message = (*fastReflection_TradeData)(nil)

type fastReflection_TradeData TradeData

func (x *TradeData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TradeData)(x)
}

func (x *TradeData) slowProtoReflect() protoreflect.Message {
	mi := &file_ggezchain_trade_trade_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TradeData_messageType fastReflection_TradeData_messageType
var _ protoreflect.MessageType = fastReflection_TradeData_messageType{}

type fastReflection_TradeData_messageType struct{}

func (x fastReflection_TradeData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TradeData)(nil)
}
func (x fastReflection_TradeData_messageType) New() protoreflect.Message {
	return new(fastReflection_TradeData)
}
func (x fastReflection_TradeData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TradeData) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TradeData) Type() protoreflect.MessageType {
	return _fastReflection_TradeData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TradeData) New() protoreflect.Message {
	return new(fastReflection_TradeData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TradeData) Interface() protoreflect.ProtoMessage {
	return (*TradeData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TradeData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TradeInfo != nil {
		value := protoreflect.ValueOfMessage(x.TradeInfo.ProtoReflect())
		if !f(fd_TradeData_trade_info, value) {
			return
		}
	}
	if x.Brokerage != nil {
		value := protoreflect.ValueOfMessage(x.Brokerage.ProtoReflect())
		if !f(fd_TradeData_brokerage, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TradeData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		return x.TradeInfo != nil
	case "ggezchain.trade.TradeData.brokerage":
		return x.Brokerage != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		x.TradeInfo = nil
	case "ggezchain.trade.TradeData.brokerage":
		x.Brokerage = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TradeData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		value := x.TradeInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ggezchain.trade.TradeData.brokerage":
		value := x.Brokerage
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		x.TradeInfo = value.Message().Interface().(*TradeInfo)
	case "ggezchain.trade.TradeData.brokerage":
		x.Brokerage = value.Message().Interface().(*Brokerage)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		if x.TradeInfo == nil {
			x.TradeInfo = new(TradeInfo)
		}
		return protoreflect.ValueOfMessage(x.TradeInfo.ProtoReflect())
	case "ggezchain.trade.TradeData.brokerage":
		if x.Brokerage == nil {
			x.Brokerage = new(Brokerage)
		}
		return protoreflect.ValueOfMessage(x.Brokerage.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TradeData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.TradeData.trade_info":
		m := new(TradeInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ggezchain.trade.TradeData.brokerage":
		m := new(Brokerage)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeData"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TradeData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ggezchain.trade.TradeData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TradeData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TradeData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TradeData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TradeData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TradeInfo != nil {
			l = options.Size(x.TradeInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Brokerage != nil {
			l = options.Size(x.Brokerage)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TradeData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Brokerage != nil {
			encoded, err := options.Marshal(x.Brokerage)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.TradeInfo != nil {
			encoded, err := options.Marshal(x.TradeInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TradeData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TradeInfo == nil {
					x.TradeInfo = &TradeInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TradeInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Brokerage", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Brokerage == nil {
					x.Brokerage = &Brokerage{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Brokerage); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TradeInfo                 protoreflect.MessageDescriptor
	fd_TradeInfo_asset_holder_id protoreflect.FieldDescriptor
	fd_TradeInfo_asset_id        protoreflect.FieldDescriptor
	fd_TradeInfo_trade_type      protoreflect.FieldDescriptor
	fd_TradeInfo_trade_value     protoreflect.FieldDescriptor
	fd_TradeInfo_currency        protoreflect.FieldDescriptor
	fd_TradeInfo_exchange        protoreflect.FieldDescriptor
	fd_TradeInfo_fund_name       protoreflect.FieldDescriptor
	fd_TradeInfo_issuer          protoreflect.FieldDescriptor
	fd_TradeInfo_no_shares       protoreflect.FieldDescriptor
	fd_TradeInfo_price           protoreflect.FieldDescriptor
	fd_TradeInfo_quantity        protoreflect.FieldDescriptor
	fd_TradeInfo_segment         protoreflect.FieldDescriptor
	fd_TradeInfo_share_price     protoreflect.FieldDescriptor
	fd_TradeInfo_ticker          protoreflect.FieldDescriptor
	fd_TradeInfo_trade_fee       protoreflect.FieldDescriptor
	fd_TradeInfo_trade_net_price protoreflect.FieldDescriptor
	fd_TradeInfo_trade_net_value protoreflect.FieldDescriptor
)

func init() {
	file_ggezchain_trade_trade_data_proto_init()
	md_TradeInfo = File_ggezchain_trade_trade_data_proto.Messages().ByName("TradeInfo")
	fd_TradeInfo_asset_holder_id = md_TradeInfo.Fields().ByName("asset_holder_id")
	fd_TradeInfo_asset_id = md_TradeInfo.Fields().ByName("asset_id")
	fd_TradeInfo_trade_type = md_TradeInfo.Fields().ByName("trade_type")
	fd_TradeInfo_trade_value = md_TradeInfo.Fields().ByName("trade_value")
	fd_TradeInfo_currency = md_TradeInfo.Fields().ByName("currency")
	fd_TradeInfo_exchange = md_TradeInfo.Fields().ByName("exchange")
	fd_TradeInfo_fund_name = md_TradeInfo.Fields().ByName("fund_name")
	fd_TradeInfo_issuer = md_TradeInfo.Fields().ByName("issuer")
	fd_TradeInfo_no_shares = md_TradeInfo.Fields().ByName("no_shares")
	fd_TradeInfo_price = md_TradeInfo.Fields().ByName("price")
	fd_TradeInfo_quantity = md_TradeInfo.Fields().ByName("quantity")
	fd_TradeInfo_segment = md_TradeInfo.Fields().ByName("segment")
	fd_TradeInfo_share_price = md_TradeInfo.Fields().ByName("share_price")
	fd_TradeInfo_ticker = md_TradeInfo.Fields().ByName("ticker")
	fd_TradeInfo_trade_fee = md_TradeInfo.Fields().ByName("trade_fee")
	fd_TradeInfo_trade_net_price = md_TradeInfo.Fields().ByName("trade_net_price")
	fd_TradeInfo_trade_net_value = md_TradeInfo.Fields().ByName("trade_net_value")
}

var _ protoreflect.Message = (*fastReflection_TradeInfo)(nil)

type fastReflection_TradeInfo TradeInfo

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TradeInfo)(x)
}

func (x *TradeInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_ggezchain_trade_trade_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TradeInfo_messageType fastReflection_TradeInfo_messageType
var _ protoreflect.MessageType = fastReflection_TradeInfo_messageType{}

type fastReflection_TradeInfo_messageType struct{}

func (x fastReflection_TradeInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TradeInfo)(nil)
}
func (x fastReflection_TradeInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_TradeInfo)
}
func (x fastReflection_TradeInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TradeInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TradeInfo) Type() protoreflect.MessageType {
	return _fastReflection_TradeInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TradeInfo) New() protoreflect.Message {
	return new(fastReflection_TradeInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TradeInfo) Interface() protoreflect.ProtoMessage {
	return (*TradeInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TradeInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AssetHolderId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AssetHolderId)
		if !f(fd_TradeInfo_asset_holder_id, value) {
			return
		}
	}
	if x.AssetId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AssetId)
		if !f(fd_TradeInfo_asset_id, value) {
			return
		}
	}
	if x.TradeType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.TradeType))
		if !f(fd_TradeInfo_trade_type, value) {
			return
		}
	}
	if x.TradeValue != float64(0) || math.Signbit(x.TradeValue) {
		value := protoreflect.ValueOfFloat64(x.TradeValue)
		if !f(fd_TradeInfo_trade_value, value) {
			return
		}
	}
	if x.Currency != "" {
		value := protoreflect.ValueOfString(x.Currency)
		if !f(fd_TradeInfo_currency, value) {
			return
		}
	}
	if x.Exchange != "" {
		value := protoreflect.ValueOfString(x.Exchange)
		if !f(fd_TradeInfo_exchange, value) {
			return
		}
	}
	if x.FundName != "" {
		value := protoreflect.ValueOfString(x.FundName)
		if !f(fd_TradeInfo_fund_name, value) {
			return
		}
	}
	if x.Issuer != "" {
		value := protoreflect.ValueOfString(x.Issuer)
		if !f(fd_TradeInfo_issuer, value) {
			return
		}
	}
	if x.NoShares != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NoShares)
		if !f(fd_TradeInfo_no_shares, value) {
			return
		}
	}
	if x.Price != float64(0) || math.Signbit(x.Price) {
		value := protoreflect.ValueOfFloat64(x.Price)
		if !f(fd_TradeInfo_price, value) {
			return
		}
	}
	if x.Quantity != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Quantity)
		if !f(fd_TradeInfo_quantity, value) {
			return
		}
	}
	if x.Segment != "" {
		value := protoreflect.ValueOfString(x.Segment)
		if !f(fd_TradeInfo_segment, value) {
			return
		}
	}
	if x.SharePrice != float64(0) || math.Signbit(x.SharePrice) {
		value := protoreflect.ValueOfFloat64(x.SharePrice)
		if !f(fd_TradeInfo_share_price, value) {
			return
		}
	}
	if x.Ticker != "" {
		value := protoreflect.ValueOfString(x.Ticker)
		if !f(fd_TradeInfo_ticker, value) {
			return
		}
	}
	if x.TradeFee != float64(0) || math.Signbit(x.TradeFee) {
		value := protoreflect.ValueOfFloat64(x.TradeFee)
		if !f(fd_TradeInfo_trade_fee, value) {
			return
		}
	}
	if x.TradeNetPrice != float64(0) || math.Signbit(x.TradeNetPrice) {
		value := protoreflect.ValueOfFloat64(x.TradeNetPrice)
		if !f(fd_TradeInfo_trade_net_price, value) {
			return
		}
	}
	if x.TradeNetValue != float64(0) || math.Signbit(x.TradeNetValue) {
		value := protoreflect.ValueOfFloat64(x.TradeNetValue)
		if !f(fd_TradeInfo_trade_net_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TradeInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		return x.AssetHolderId != uint64(0)
	case "ggezchain.trade.TradeInfo.asset_id":
		return x.AssetId != uint64(0)
	case "ggezchain.trade.TradeInfo.trade_type":
		return x.TradeType != 0
	case "ggezchain.trade.TradeInfo.trade_value":
		return x.TradeValue != float64(0) || math.Signbit(x.TradeValue)
	case "ggezchain.trade.TradeInfo.currency":
		return x.Currency != ""
	case "ggezchain.trade.TradeInfo.exchange":
		return x.Exchange != ""
	case "ggezchain.trade.TradeInfo.fund_name":
		return x.FundName != ""
	case "ggezchain.trade.TradeInfo.issuer":
		return x.Issuer != ""
	case "ggezchain.trade.TradeInfo.no_shares":
		return x.NoShares != uint64(0)
	case "ggezchain.trade.TradeInfo.price":
		return x.Price != float64(0) || math.Signbit(x.Price)
	case "ggezchain.trade.TradeInfo.quantity":
		return x.Quantity != uint64(0)
	case "ggezchain.trade.TradeInfo.segment":
		return x.Segment != ""
	case "ggezchain.trade.TradeInfo.share_price":
		return x.SharePrice != float64(0) || math.Signbit(x.SharePrice)
	case "ggezchain.trade.TradeInfo.ticker":
		return x.Ticker != ""
	case "ggezchain.trade.TradeInfo.trade_fee":
		return x.TradeFee != float64(0) || math.Signbit(x.TradeFee)
	case "ggezchain.trade.TradeInfo.trade_net_price":
		return x.TradeNetPrice != float64(0) || math.Signbit(x.TradeNetPrice)
	case "ggezchain.trade.TradeInfo.trade_net_value":
		return x.TradeNetValue != float64(0) || math.Signbit(x.TradeNetValue)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		x.AssetHolderId = uint64(0)
	case "ggezchain.trade.TradeInfo.asset_id":
		x.AssetId = uint64(0)
	case "ggezchain.trade.TradeInfo.trade_type":
		x.TradeType = 0
	case "ggezchain.trade.TradeInfo.trade_value":
		x.TradeValue = float64(0)
	case "ggezchain.trade.TradeInfo.currency":
		x.Currency = ""
	case "ggezchain.trade.TradeInfo.exchange":
		x.Exchange = ""
	case "ggezchain.trade.TradeInfo.fund_name":
		x.FundName = ""
	case "ggezchain.trade.TradeInfo.issuer":
		x.Issuer = ""
	case "ggezchain.trade.TradeInfo.no_shares":
		x.NoShares = uint64(0)
	case "ggezchain.trade.TradeInfo.price":
		x.Price = float64(0)
	case "ggezchain.trade.TradeInfo.quantity":
		x.Quantity = uint64(0)
	case "ggezchain.trade.TradeInfo.segment":
		x.Segment = ""
	case "ggezchain.trade.TradeInfo.share_price":
		x.SharePrice = float64(0)
	case "ggezchain.trade.TradeInfo.ticker":
		x.Ticker = ""
	case "ggezchain.trade.TradeInfo.trade_fee":
		x.TradeFee = float64(0)
	case "ggezchain.trade.TradeInfo.trade_net_price":
		x.TradeNetPrice = float64(0)
	case "ggezchain.trade.TradeInfo.trade_net_value":
		x.TradeNetValue = float64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TradeInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		value := x.AssetHolderId
		return protoreflect.ValueOfUint64(value)
	case "ggezchain.trade.TradeInfo.asset_id":
		value := x.AssetId
		return protoreflect.ValueOfUint64(value)
	case "ggezchain.trade.TradeInfo.trade_type":
		value := x.TradeType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "ggezchain.trade.TradeInfo.trade_value":
		value := x.TradeValue
		return protoreflect.ValueOfFloat64(value)
	case "ggezchain.trade.TradeInfo.currency":
		value := x.Currency
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.exchange":
		value := x.Exchange
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.fund_name":
		value := x.FundName
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.issuer":
		value := x.Issuer
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.no_shares":
		value := x.NoShares
		return protoreflect.ValueOfUint64(value)
	case "ggezchain.trade.TradeInfo.price":
		value := x.Price
		return protoreflect.ValueOfFloat64(value)
	case "ggezchain.trade.TradeInfo.quantity":
		value := x.Quantity
		return protoreflect.ValueOfUint64(value)
	case "ggezchain.trade.TradeInfo.segment":
		value := x.Segment
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfFloat64(value)
	case "ggezchain.trade.TradeInfo.ticker":
		value := x.Ticker
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.TradeInfo.trade_fee":
		value := x.TradeFee
		return protoreflect.ValueOfFloat64(value)
	case "ggezchain.trade.TradeInfo.trade_net_price":
		value := x.TradeNetPrice
		return protoreflect.ValueOfFloat64(value)
	case "ggezchain.trade.TradeInfo.trade_net_value":
		value := x.TradeNetValue
		return protoreflect.ValueOfFloat64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		x.AssetHolderId = value.Uint()
	case "ggezchain.trade.TradeInfo.asset_id":
		x.AssetId = value.Uint()
	case "ggezchain.trade.TradeInfo.trade_type":
		x.TradeType = (TradeType)(value.Enum())
	case "ggezchain.trade.TradeInfo.trade_value":
		x.TradeValue = value.Float()
	case "ggezchain.trade.TradeInfo.currency":
		x.Currency = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.exchange":
		x.Exchange = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.fund_name":
		x.FundName = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.issuer":
		x.Issuer = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.no_shares":
		x.NoShares = value.Uint()
	case "ggezchain.trade.TradeInfo.price":
		x.Price = value.Float()
	case "ggezchain.trade.TradeInfo.quantity":
		x.Quantity = value.Uint()
	case "ggezchain.trade.TradeInfo.segment":
		x.Segment = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.share_price":
		x.SharePrice = value.Float()
	case "ggezchain.trade.TradeInfo.ticker":
		x.Ticker = value.Interface().(string)
	case "ggezchain.trade.TradeInfo.trade_fee":
		x.TradeFee = value.Float()
	case "ggezchain.trade.TradeInfo.trade_net_price":
		x.TradeNetPrice = value.Float()
	case "ggezchain.trade.TradeInfo.trade_net_value":
		x.TradeNetValue = value.Float()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		panic(fmt.Errorf("field asset_holder_id of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.asset_id":
		panic(fmt.Errorf("field asset_id of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.trade_type":
		panic(fmt.Errorf("field trade_type of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.trade_value":
		panic(fmt.Errorf("field trade_value of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.currency":
		panic(fmt.Errorf("field currency of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.exchange":
		panic(fmt.Errorf("field exchange of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.fund_name":
		panic(fmt.Errorf("field fund_name of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.issuer":
		panic(fmt.Errorf("field issuer of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.no_shares":
		panic(fmt.Errorf("field no_shares of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.price":
		panic(fmt.Errorf("field price of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.quantity":
		panic(fmt.Errorf("field quantity of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.segment":
		panic(fmt.Errorf("field segment of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.share_price":
		panic(fmt.Errorf("field share_price of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.ticker":
		panic(fmt.Errorf("field ticker of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.trade_fee":
		panic(fmt.Errorf("field trade_fee of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.trade_net_price":
		panic(fmt.Errorf("field trade_net_price of message ggezchain.trade.TradeInfo is not mutable"))
	case "ggezchain.trade.TradeInfo.trade_net_value":
		panic(fmt.Errorf("field trade_net_value of message ggezchain.trade.TradeInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TradeInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.TradeInfo.asset_holder_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ggezchain.trade.TradeInfo.asset_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ggezchain.trade.TradeInfo.trade_type":
		return protoreflect.ValueOfEnum(0)
	case "ggezchain.trade.TradeInfo.trade_value":
		return protoreflect.ValueOfFloat64(float64(0))
	case "ggezchain.trade.TradeInfo.currency":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.exchange":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.fund_name":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.issuer":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.no_shares":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ggezchain.trade.TradeInfo.price":
		return protoreflect.ValueOfFloat64(float64(0))
	case "ggezchain.trade.TradeInfo.quantity":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ggezchain.trade.TradeInfo.segment":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.share_price":
		return protoreflect.ValueOfFloat64(float64(0))
	case "ggezchain.trade.TradeInfo.ticker":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.TradeInfo.trade_fee":
		return protoreflect.ValueOfFloat64(float64(0))
	case "ggezchain.trade.TradeInfo.trade_net_price":
		return protoreflect.ValueOfFloat64(float64(0))
	case "ggezchain.trade.TradeInfo.trade_net_value":
		return protoreflect.ValueOfFloat64(float64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.TradeInfo"))
		}
		panic(fmt.Errorf("message ggezchain.trade.TradeInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TradeInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ggezchain.trade.TradeInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TradeInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TradeInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TradeInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TradeInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.AssetHolderId != 0 {
			n += 1 + runtime.Sov(uint64(x.AssetHolderId))
		}
		if x.AssetId != 0 {
			n += 1 + runtime.Sov(uint64(x.AssetId))
		}
		if x.TradeType != 0 {
			n += 1 + runtime.Sov(uint64(x.TradeType))
		}
		if x.TradeValue != 0 || math.Signbit(x.TradeValue) {
			n += 9
		}
		l = len(x.Currency)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Exchange)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundName)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Issuer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NoShares != 0 {
			n += 1 + runtime.Sov(uint64(x.NoShares))
		}
		if x.Price != 0 || math.Signbit(x.Price) {
			n += 9
		}
		if x.Quantity != 0 {
			n += 1 + runtime.Sov(uint64(x.Quantity))
		}
		l = len(x.Segment)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SharePrice != 0 || math.Signbit(x.SharePrice) {
			n += 9
		}
		l = len(x.Ticker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TradeFee != 0 || math.Signbit(x.TradeFee) {
			n += 9
		}
		if x.TradeNetPrice != 0 || math.Signbit(x.TradeNetPrice) {
			n += 10
		}
		if x.TradeNetValue != 0 || math.Signbit(x.TradeNetValue) {
			n += 10
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TradeInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TradeNetValue != 0 || math.Signbit(x.TradeNetValue) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.TradeNetValue))))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x89
		}
		if x.TradeNetPrice != 0 || math.Signbit(x.TradeNetPrice) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.TradeNetPrice))))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x81
		}
		if x.TradeFee != 0 || math.Signbit(x.TradeFee) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.TradeFee))))
			i--
			dAtA[i] = 0x79
		}
		if len(x.Ticker) > 0 {
			i -= len(x.Ticker)
			copy(dAtA[i:], x.Ticker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Ticker)))
			i--
			dAtA[i] = 0x72
		}
		if x.SharePrice != 0 || math.Signbit(x.SharePrice) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.SharePrice))))
			i--
			dAtA[i] = 0x69
		}
		if len(x.Segment) > 0 {
			i -= len(x.Segment)
			copy(dAtA[i:], x.Segment)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Segment)))
			i--
			dAtA[i] = 0x62
		}
		if x.Quantity != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Quantity))
			i--
			dAtA[i] = 0x58
		}
		if x.Price != 0 || math.Signbit(x.Price) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.Price))))
			i--
			dAtA[i] = 0x51
		}
		if x.NoShares != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NoShares))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Issuer) > 0 {
			i -= len(x.Issuer)
			copy(dAtA[i:], x.Issuer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Issuer)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.FundName) > 0 {
			i -= len(x.FundName)
			copy(dAtA[i:], x.FundName)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundName)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Exchange) > 0 {
			i -= len(x.Exchange)
			copy(dAtA[i:], x.Exchange)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Exchange)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Currency) > 0 {
			i -= len(x.Currency)
			copy(dAtA[i:], x.Currency)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Currency)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TradeValue != 0 || math.Signbit(x.TradeValue) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.TradeValue))))
			i--
			dAtA[i] = 0x21
		}
		if x.TradeType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TradeType))
			i--
			dAtA[i] = 0x18
		}
		if x.AssetId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssetId))
			i--
			dAtA[i] = 0x10
		}
		if x.AssetHolderId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssetHolderId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TradeInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetHolderId", wireType)
				}
				x.AssetHolderId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssetHolderId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
				}
				x.AssetId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssetId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeType", wireType)
				}
				x.TradeType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TradeType |= TradeType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeValue", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.TradeValue = float64(math.Float64frombits(v))
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Currency = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Exchange = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundName", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundName = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Issuer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoShares", wireType)
				}
				x.NoShares = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NoShares |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.Price = float64(math.Float64frombits(v))
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
				}
				x.Quantity = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Quantity |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Segment = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.SharePrice = float64(math.Float64frombits(v))
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Ticker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeFee", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.TradeFee = float64(math.Float64frombits(v))
			case 16:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeNetPrice", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.TradeNetPrice = float64(math.Float64frombits(v))
			case 17:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeNetValue", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.TradeNetValue = float64(math.Float64frombits(v))
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Brokerage         protoreflect.MessageDescriptor
	fd_Brokerage_name    protoreflect.FieldDescriptor
	fd_Brokerage_type    protoreflect.FieldDescriptor
	fd_Brokerage_country protoreflect.FieldDescriptor
)

func init() {
	file_ggezchain_trade_trade_data_proto_init()
	md_Brokerage = File_ggezchain_trade_trade_data_proto.Messages().ByName("Brokerage")
	fd_Brokerage_name = md_Brokerage.Fields().ByName("name")
	fd_Brokerage_type = md_Brokerage.Fields().ByName("type")
	fd_Brokerage_country = md_Brokerage.Fields().ByName("country")
}

var _ protoreflect.Message = (*fastReflection_Brokerage)(nil)

type fastReflection_Brokerage Brokerage

func (x *Brokerage) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Brokerage)(x)
}

func (x *Brokerage) slowProtoReflect() protoreflect.Message {
	mi := &file_ggezchain_trade_trade_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Brokerage_messageType fastReflection_Brokerage_messageType
var _ protoreflect.MessageType = fastReflection_Brokerage_messageType{}

type fastReflection_Brokerage_messageType struct{}

func (x fastReflection_Brokerage_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Brokerage)(nil)
}
func (x fastReflection_Brokerage_messageType) New() protoreflect.Message {
	return new(fastReflection_Brokerage)
}
func (x fastReflection_Brokerage_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Brokerage
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Brokerage) Descriptor() protoreflect.MessageDescriptor {
	return md_Brokerage
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Brokerage) Type() protoreflect.MessageType {
	return _fastReflection_Brokerage_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Brokerage) New() protoreflect.Message {
	return new(fastReflection_Brokerage)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Brokerage) Interface() protoreflect.ProtoMessage {
	return (*Brokerage)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Brokerage) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_Brokerage_name, value) {
			return
		}
	}
	if x.Type_ != "" {
		value := protoreflect.ValueOfString(x.Type_)
		if !f(fd_Brokerage_type, value) {
			return
		}
	}
	if x.Country != "" {
		value := protoreflect.ValueOfString(x.Country)
		if !f(fd_Brokerage_country, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Brokerage) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ggezchain.trade.Brokerage.name":
		return x.Name != ""
	case "ggezchain.trade.Brokerage.type":
		return x.Type_ != ""
	case "ggezchain.trade.Brokerage.country":
		return x.Country != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Brokerage) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ggezchain.trade.Brokerage.name":
		x.Name = ""
	case "ggezchain.trade.Brokerage.type":
		x.Type_ = ""
	case "ggezchain.trade.Brokerage.country":
		x.Country = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Brokerage) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ggezchain.trade.Brokerage.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.Brokerage.type":
		value := x.Type_
		return protoreflect.ValueOfString(value)
	case "ggezchain.trade.Brokerage.country":
		value := x.Country
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Brokerage) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ggezchain.trade.Brokerage.name":
		x.Name = value.Interface().(string)
	case "ggezchain.trade.Brokerage.type":
		x.Type_ = value.Interface().(string)
	case "ggezchain.trade.Brokerage.country":
		x.Country = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Brokerage) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.Brokerage.name":
		panic(fmt.Errorf("field name of message ggezchain.trade.Brokerage is not mutable"))
	case "ggezchain.trade.Brokerage.type":
		panic(fmt.Errorf("field type of message ggezchain.trade.Brokerage is not mutable"))
	case "ggezchain.trade.Brokerage.country":
		panic(fmt.Errorf("field country of message ggezchain.trade.Brokerage is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Brokerage) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ggezchain.trade.Brokerage.name":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.Brokerage.type":
		return protoreflect.ValueOfString("")
	case "ggezchain.trade.Brokerage.country":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ggezchain.trade.Brokerage"))
		}
		panic(fmt.Errorf("message ggezchain.trade.Brokerage does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Brokerage) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ggezchain.trade.Brokerage", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Brokerage) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Brokerage) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Brokerage) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Brokerage) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Brokerage)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Type_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Country)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Brokerage)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Country) > 0 {
			i -= len(x.Country)
			copy(dAtA[i:], x.Country)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Country)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Type_) > 0 {
			i -= len(x.Type_)
			copy(dAtA[i:], x.Type_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Brokerage)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Brokerage: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Brokerage: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Country = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ggezchain/trade/trade_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeInfo *TradeInfo `protobuf:"bytes,1,opt,name=trade_info,json=tradeInfo,proto3" json:"trade_info,omitempty"`
	Brokerage *Brokerage `protobuf:"bytes,2,opt,name=brokerage,proto3" json:"brokerage,omitempty"`
}

func (x *TradeData) Reset() {
	*x = TradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ggezchain_trade_trade_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeData) ProtoMessage() {}

// Deprecated: Use TradeData.ProtoReflect.Descriptor instead.
func (*TradeData) Descriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_data_proto_rawDescGZIP(), []int{0}
}

func (x *TradeData) GetTradeInfo() *TradeInfo {
	if x != nil {
		return x.TradeInfo
	}
	return nil
}

func (x *TradeData) GetBrokerage() *Brokerage {
	if x != nil {
		return x.Brokerage
	}
	return nil
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetHolderId uint64    `protobuf:"varint,1,opt,name=asset_holder_id,json=assetHolderId,proto3" json:"asset_holder_id,omitempty"`
	AssetId       uint64    `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TradeType     TradeType `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3,enum=ggezchain.trade.TradeType" json:"trade_type,omitempty"`
	TradeValue    float64   `protobuf:"fixed64,4,opt,name=trade_value,json=tradeValue,proto3" json:"trade_value,omitempty"`
	Currency      string    `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Exchange      string    `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	FundName      string    `protobuf:"bytes,7,opt,name=fund_name,json=fundName,proto3" json:"fund_name,omitempty"`
	Issuer        string    `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	NoShares      uint64    `protobuf:"varint,9,opt,name=no_shares,json=noShares,proto3" json:"no_shares,omitempty"`
	Price         float64   `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      uint64    `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Segment       string    `protobuf:"bytes,12,opt,name=segment,proto3" json:"segment,omitempty"`
	SharePrice    float64   `protobuf:"fixed64,13,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	Ticker        string    `protobuf:"bytes,14,opt,name=ticker,proto3" json:"ticker,omitempty"`
	TradeFee      float64   `protobuf:"fixed64,15,opt,name=trade_fee,json=tradeFee,proto3" json:"trade_fee,omitempty"`
	TradeNetPrice float64   `protobuf:"fixed64,16,opt,name=trade_net_price,json=tradeNetPrice,proto3" json:"trade_net_price,omitempty"`
	TradeNetValue float64   `protobuf:"fixed64,17,opt,name=trade_net_value,json=tradeNetValue,proto3" json:"trade_net_value,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ggezchain_trade_trade_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_data_proto_rawDescGZIP(), []int{1}
}

func (x *TradeInfo) GetAssetHolderId() uint64 {
	if x != nil {
		return x.AssetHolderId
	}
	return 0
}

func (x *TradeInfo) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *TradeInfo) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *TradeInfo) GetTradeValue() float64 {
	if x != nil {
		return x.TradeValue
	}
	return 0
}

func (x *TradeInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradeInfo) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradeInfo) GetFundName() string {
	if x != nil {
		return x.FundName
	}
	return ""
}

func (x *TradeInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TradeInfo) GetNoShares() uint64 {
	if x != nil {
		return x.NoShares
	}
	return 0
}

func (x *TradeInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeInfo) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeInfo) GetSegment() string {
	if x != nil {
		return x.Segment
	}
	return ""
}

func (x *TradeInfo) GetSharePrice() float64 {
	if x != nil {
		return x.SharePrice
	}
	return 0
}

func (x *TradeInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TradeInfo) GetTradeFee() float64 {
	if x != nil {
		return x.TradeFee
	}
	return 0
}

func (x *TradeInfo) GetTradeNetPrice() float64 {
	if x != nil {
		return x.TradeNetPrice
	}
	return 0
}

func (x *TradeInfo) GetTradeNetValue() float64 {
	if x != nil {
		return x.TradeNetValue
	}
	return 0
}

type Brokerage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type_   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Brokerage) Reset() {
	*x = Brokerage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ggezchain_trade_trade_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brokerage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brokerage) ProtoMessage() {}

// Deprecated: Use Brokerage.ProtoReflect.Descriptor instead.
func (*Brokerage) Descriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_data_proto_rawDescGZIP(), []int{2}
}

func (x *Brokerage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Brokerage) GetType_() string {
	if x != nil {
		return x.Type_
	}
	return ""
}

func (x *Brokerage) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

var File_ggezchain_trade_trade_data_proto protoreflect.FileDescriptor

var file_ggezchain_trade_trade_data_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x1a, 0x1b, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x80, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6e, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x09,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xb5, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x47, 0x47, 0x45, 0x5a, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x67, 0x65, 0x7a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2, 0x02, 0x03, 0x47, 0x54, 0x58, 0xaa, 0x02,
	0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0xca, 0x02, 0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0xe2, 0x02, 0x1b, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x10, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ggezchain_trade_trade_data_proto_rawDescOnce sync.Once
	file_ggezchain_trade_trade_data_proto_rawDescData = file_ggezchain_trade_trade_data_proto_rawDesc
)

func file_ggezchain_trade_trade_data_proto_rawDescGZIP() []byte {
	file_ggezchain_trade_trade_data_proto_rawDescOnce.Do(func() {
		file_ggezchain_trade_trade_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_ggezchain_trade_trade_data_proto_rawDescData)
	})
	return file_ggezchain_trade_trade_data_proto_rawDescData
}

var file_ggezchain_trade_trade_data_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ggezchain_trade_trade_data_proto_goTypes = []interface{}{
	(*TradeData)(nil), // 0: ggezchain.trade.TradeData
	(*TradeInfo)(nil), // 1: ggezchain.trade.TradeInfo
	(*Brokerage)(nil), // 2: ggezchain.trade.Brokerage
	(TradeType)(0),    // 3: ggezchain.trade.TradeType
}
var file_ggezchain_trade_trade_data_proto_depIdxs = []int32{
	1, // 0: ggezchain.trade.TradeData.trade_info:type_name -> ggezchain.trade.TradeInfo
	2, // 1: ggezchain.trade.TradeData.brokerage:type_name -> ggezchain.trade.Brokerage
	3, // 2: ggezchain.trade.TradeInfo.trade_type:type_name -> ggezchain.trade.TradeType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ggezchain_trade_trade_data_proto_init() }
func file_ggezchain_trade_trade_data_proto_init() {
	if File_ggezchain_trade_trade_data_proto != nil {
		return
	}
	file_ggezchain_trade_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ggezchain_trade_trade_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ggezchain_trade_trade_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ggezchain_trade_trade_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brokerage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ggezchain_trade_trade_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ggezchain_trade_trade_data_proto_goTypes,
		DependencyIndexes: file_ggezchain_trade_trade_data_proto_depIdxs,
		MessageInfos:      file_ggezchain_trade_trade_data_proto_msgTypes,
	}.Build()
	File_ggezchain_trade_trade_data_proto = out.File
	file_ggezchain_trade_trade_data_proto_rawDesc = nil
	file_ggezchain_trade_trade_data_proto_goTypes = nil
	file_ggezchain_trade_trade_data_proto_depIdxs = nil
}
