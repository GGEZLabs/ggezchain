// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package trade

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ggezchain/trade/trade.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeStatus int32

const (
	// TRADE_STATUS_UNSPECIFIED defines the default trade status.
	TradeStatus_TRADE_STATUS_UNSPECIFIED TradeStatus = 0
	// TRADE_STATUS_PENDING defines a trade status of a trade that still
	// not processed.
	TradeStatus_TRADE_STATUS_PENDING TradeStatus = 1
	// TRADE_STATUS_CANCELED defines a trade status of a trade that has
	// canceled.
	TradeStatus_TRADE_STATUS_CANCELED TradeStatus = 2
	// TRADE_STATUS_PROCESSED defines a trade status of a trade that has
	// processed.
	TradeStatus_TRADE_STATUS_PROCESSED TradeStatus = 3
	// TRADE_STATUS_REJECTED defines a trade status of a trade that has
	// been REJECTED.
	TradeStatus_TRADE_STATUS_REJECTED TradeStatus = 4
	// TRADE_STATUS_FAILED defines a trade status of a trade that has
	// failed.
	TradeStatus_TRADE_STATUS_FAILED TradeStatus = 5
)

// Enum value maps for TradeStatus.
var (
	TradeStatus_name = map[int32]string{
		0: "TRADE_STATUS_UNSPECIFIED",
		1: "TRADE_STATUS_PENDING",
		2: "TRADE_STATUS_CANCELED",
		3: "TRADE_STATUS_PROCESSED",
		4: "TRADE_STATUS_REJECTED",
		5: "TRADE_STATUS_FAILED",
	}
	TradeStatus_value = map[string]int32{
		"TRADE_STATUS_UNSPECIFIED": 0,
		"TRADE_STATUS_PENDING":     1,
		"TRADE_STATUS_CANCELED":    2,
		"TRADE_STATUS_PROCESSED":   3,
		"TRADE_STATUS_REJECTED":    4,
		"TRADE_STATUS_FAILED":      5,
	}
)

func (x TradeStatus) Enum() *TradeStatus {
	p := new(TradeStatus)
	*p = x
	return p
}

func (x TradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ggezchain_trade_trade_proto_enumTypes[0].Descriptor()
}

func (TradeStatus) Type() protoreflect.EnumType {
	return &file_ggezchain_trade_trade_proto_enumTypes[0]
}

func (x TradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeStatus.Descriptor instead.
func (TradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_proto_rawDescGZIP(), []int{0}
}

type ProcessType int32

const (
	ProcessType_PROCESS_TYPE_UNSPECIFIED ProcessType = 0
	ProcessType_PROCESS_TYPE_CONFIRM     ProcessType = 1
	ProcessType_PROCESS_TYPE_REJECT      ProcessType = 2
)

// Enum value maps for ProcessType.
var (
	ProcessType_name = map[int32]string{
		0: "PROCESS_TYPE_UNSPECIFIED",
		1: "PROCESS_TYPE_CONFIRM",
		2: "PROCESS_TYPE_REJECT",
	}
	ProcessType_value = map[string]int32{
		"PROCESS_TYPE_UNSPECIFIED": 0,
		"PROCESS_TYPE_CONFIRM":     1,
		"PROCESS_TYPE_REJECT":      2,
	}
)

func (x ProcessType) Enum() *ProcessType {
	p := new(ProcessType)
	*p = x
	return p
}

func (x ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_ggezchain_trade_trade_proto_enumTypes[1].Descriptor()
}

func (ProcessType) Type() protoreflect.EnumType {
	return &file_ggezchain_trade_trade_proto_enumTypes[1]
}

func (x ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessType.Descriptor instead.
func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_proto_rawDescGZIP(), []int{1}
}

type TradeType int32

const (
	TradeType_TRADE_TYPE_UNSPECIFIED  TradeType = 0
	TradeType_TRADE_TYPE_BUY          TradeType = 1
	TradeType_TRADE_TYPE_SELL         TradeType = 2
	TradeType_TRADE_TYPE_SPLIT        TradeType = 3
	TradeType_TRADE_TYPE_REINVESTMENT TradeType = 4
	TradeType_TRADE_TYPE_DIVIDENDS    TradeType = 5
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "TRADE_TYPE_UNSPECIFIED",
		1: "TRADE_TYPE_BUY",
		2: "TRADE_TYPE_SELL",
		3: "TRADE_TYPE_SPLIT",
		4: "TRADE_TYPE_REINVESTMENT",
		5: "TRADE_TYPE_DIVIDENDS",
	}
	TradeType_value = map[string]int32{
		"TRADE_TYPE_UNSPECIFIED":  0,
		"TRADE_TYPE_BUY":          1,
		"TRADE_TYPE_SELL":         2,
		"TRADE_TYPE_SPLIT":        3,
		"TRADE_TYPE_REINVESTMENT": 4,
		"TRADE_TYPE_DIVIDENDS":    5,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ggezchain_trade_trade_proto_enumTypes[2].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_ggezchain_trade_trade_proto_enumTypes[2]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_ggezchain_trade_trade_proto_rawDescGZIP(), []int{2}
}

var File_ggezchain_trade_trade_proto protoreflect.FileDescriptor

var file_ggezchain_trade_trade_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67,
	0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2a, 0xb0,
	0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0x5e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x53, 0x10,
	0x05, 0x42, 0xb1, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x67, 0x65, 0x7a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x42, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x47, 0x45, 0x5a, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x67, 0x65,
	0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x67, 0x65, 0x7a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0xa2, 0x02, 0x03, 0x47, 0x54, 0x58,
	0xaa, 0x02, 0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0xca, 0x02, 0x0f, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0xe2, 0x02, 0x1b, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x10, 0x47, 0x67, 0x65, 0x7a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ggezchain_trade_trade_proto_rawDescOnce sync.Once
	file_ggezchain_trade_trade_proto_rawDescData = file_ggezchain_trade_trade_proto_rawDesc
)

func file_ggezchain_trade_trade_proto_rawDescGZIP() []byte {
	file_ggezchain_trade_trade_proto_rawDescOnce.Do(func() {
		file_ggezchain_trade_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_ggezchain_trade_trade_proto_rawDescData)
	})
	return file_ggezchain_trade_trade_proto_rawDescData
}

var file_ggezchain_trade_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ggezchain_trade_trade_proto_goTypes = []interface{}{
	(TradeStatus)(0), // 0: ggezchain.trade.TradeStatus
	(ProcessType)(0), // 1: ggezchain.trade.ProcessType
	(TradeType)(0),   // 2: ggezchain.trade.TradeType
}
var file_ggezchain_trade_trade_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ggezchain_trade_trade_proto_init() }
func file_ggezchain_trade_trade_proto_init() {
	if File_ggezchain_trade_trade_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ggezchain_trade_trade_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ggezchain_trade_trade_proto_goTypes,
		DependencyIndexes: file_ggezchain_trade_trade_proto_depIdxs,
		EnumInfos:         file_ggezchain_trade_trade_proto_enumTypes,
	}.Build()
	File_ggezchain_trade_trade_proto = out.File
	file_ggezchain_trade_trade_proto_rawDesc = nil
	file_ggezchain_trade_trade_proto_goTypes = nil
	file_ggezchain_trade_trade_proto_depIdxs = nil
}
