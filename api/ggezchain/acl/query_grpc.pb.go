// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ggezchain/acl/query.proto

package acl

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName          = "/ggezchain.acl.Query/Params"
	Query_AclAuthority_FullMethodName    = "/ggezchain.acl.Query/AclAuthority"
	Query_AclAuthorityAll_FullMethodName = "/ggezchain.acl.Query/AclAuthorityAll"
	Query_AclAdmin_FullMethodName        = "/ggezchain.acl.Query/AclAdmin"
	Query_AclAdminAll_FullMethodName     = "/ggezchain.acl.Query/AclAdminAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of AclAuthority items.
	AclAuthority(ctx context.Context, in *QueryGetAclAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAclAuthorityResponse, error)
	AclAuthorityAll(ctx context.Context, in *QueryAllAclAuthorityRequest, opts ...grpc.CallOption) (*QueryAllAclAuthorityResponse, error)
	// Queries a list of AclAdmin items.
	AclAdmin(ctx context.Context, in *QueryGetAclAdminRequest, opts ...grpc.CallOption) (*QueryGetAclAdminResponse, error)
	AclAdminAll(ctx context.Context, in *QueryAllAclAdminRequest, opts ...grpc.CallOption) (*QueryAllAclAdminResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AclAuthority(ctx context.Context, in *QueryGetAclAuthorityRequest, opts ...grpc.CallOption) (*QueryGetAclAuthorityResponse, error) {
	out := new(QueryGetAclAuthorityResponse)
	err := c.cc.Invoke(ctx, Query_AclAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AclAuthorityAll(ctx context.Context, in *QueryAllAclAuthorityRequest, opts ...grpc.CallOption) (*QueryAllAclAuthorityResponse, error) {
	out := new(QueryAllAclAuthorityResponse)
	err := c.cc.Invoke(ctx, Query_AclAuthorityAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AclAdmin(ctx context.Context, in *QueryGetAclAdminRequest, opts ...grpc.CallOption) (*QueryGetAclAdminResponse, error) {
	out := new(QueryGetAclAdminResponse)
	err := c.cc.Invoke(ctx, Query_AclAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AclAdminAll(ctx context.Context, in *QueryAllAclAdminRequest, opts ...grpc.CallOption) (*QueryAllAclAdminResponse, error) {
	out := new(QueryAllAclAdminResponse)
	err := c.cc.Invoke(ctx, Query_AclAdminAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of AclAuthority items.
	AclAuthority(context.Context, *QueryGetAclAuthorityRequest) (*QueryGetAclAuthorityResponse, error)
	AclAuthorityAll(context.Context, *QueryAllAclAuthorityRequest) (*QueryAllAclAuthorityResponse, error)
	// Queries a list of AclAdmin items.
	AclAdmin(context.Context, *QueryGetAclAdminRequest) (*QueryGetAclAdminResponse, error)
	AclAdminAll(context.Context, *QueryAllAclAdminRequest) (*QueryAllAclAdminResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func (UnimplementedQueryServer) AclAuthority(context.Context, *QueryGetAclAuthorityRequest) (*QueryGetAclAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclAuthority not implemented")
}

func (UnimplementedQueryServer) AclAuthorityAll(context.Context, *QueryAllAclAuthorityRequest) (*QueryAllAclAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclAuthorityAll not implemented")
}

func (UnimplementedQueryServer) AclAdmin(context.Context, *QueryGetAclAdminRequest) (*QueryGetAclAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclAdmin not implemented")
}

func (UnimplementedQueryServer) AclAdminAll(context.Context, *QueryAllAclAdminRequest) (*QueryAllAclAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AclAdminAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AclAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAclAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AclAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AclAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AclAuthority(ctx, req.(*QueryGetAclAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AclAuthorityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAclAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AclAuthorityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AclAuthorityAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AclAuthorityAll(ctx, req.(*QueryAllAclAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AclAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAclAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AclAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AclAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AclAdmin(ctx, req.(*QueryGetAclAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AclAdminAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAclAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AclAdminAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AclAdminAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AclAdminAll(ctx, req.(*QueryAllAclAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggezchain.acl.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AclAuthority",
			Handler:    _Query_AclAuthority_Handler,
		},
		{
			MethodName: "AclAuthorityAll",
			Handler:    _Query_AclAuthorityAll_Handler,
		},
		{
			MethodName: "AclAdmin",
			Handler:    _Query_AclAdmin_Handler,
		},
		{
			MethodName: "AclAdminAll",
			Handler:    _Query_AclAdminAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ggezchain/acl/query.proto",
}
